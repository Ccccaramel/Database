**********定义与理论**********
SQL 语言分为五大类
  DDL(数据定义语言) - CREATE Alter DROP 这些语句自动提交,无需用 Commit 提交
  DQL(数据查询语言) - SELECT 查询语句不存在提交问题
  DML(数据操纵语言) - INSERT Update Delete 这些语句需要 Commit 才能提交
  DTL(事务控制语言) - Commit Rollback 事务提交与回滚语句
  DCL(数据控制语言) - Grant Revoke 授予权限与回收权限语句
  执行完 DML 语句,若没有 Commit 再执行 DDL 语句,也会自动 Commit 未被 Commit 的数据
  如果打开自动提交, DML 操作后也不需要手动提交:SET AUTOCOMMIT ON;

**********SQL**********
将一个查询结果集作为另一个查询的条件
   B_table_name 的 name 作为 A_table_name 的条件
     SELECT * FROM A_table_name a where a.name in (SELECT b.name FROM B_table_name b)
  如果有多条语句，可以使用字段相加再等于 
     SELECT * FROM A_table_name a where a.fld1+a.fld2 in (SELECT b.fld1+b.fld2 FROM B_table_name b)
  使用INNER JOIN 进行查询
     SELECT a.* FROM A_table_name a inner join (SELECT b.name FROM B_table_name b group by b.name) c on a.name=c.name


索引
  索引的建立对于 slq 的高效运行是很重要的,索引可大大提高 sql 的检索速度,但也会降低更新表的速度,占用磁盘空间的索引文件
  索引分单列索引和组合索引
    单列索引:只包含单个列,一个表可以有多个单列索引
    组合索引:一个索引包含多个列
  索引也是一张表
  普通索引:
    最基本的索引,无任何限制
    创建索引:
       CREATE index indexName on table_name(username(length));
    添加索引:
       ALTER TABLE table_name ADD index indexName(columnName);
    创建表时指定:
       CREATE TABLE table_name(
         ID int not null,
         username varchar(16) not null,
         index [indexName] (username(length))
       );
    删除索引:
       DROP index [indexName] on table_name;
       alter table table_name drop constraint indexName; > Oracle
  唯一索引:
    索引列的值必须唯一,但允许有空值,若为组合索引,则列值的索引必须唯一
    创建索引:
       CREATE unique index indexName on table_name(username(length))
       ALTER TABLE table_name ADD constraint unique_p2sex unique(psex);
    修改索引:
       ALTER TABLE table_name ADD unique [indexName] (username(length))
    创建时指定:
       CREATE TABLE table_name(
         ID int not null,
         username varchar(16) not null,
         unique [indexName] (username(length))
       );
    使用 ALTER 命令添加和删除索引
      1.添加一个主键 
         ALTER TABLE table_name ADD primary key(column_list);
      2.创建索引的值必须是唯一的
         ALTER TABLE table_name ADD unique indexName(column_list);
         ALTER TABLE table_name ADD constraint indexName unique (columnName);  -- Oracle
      3.添加普通索引,索引值会出现多次
         ALTER TABLE table_name add indexName(column_list);
      4.指定索引为 fulltext ,用于全文索引 
         ALTER TABLE table_name ADD fulltext indexName(column_list);
      添加索引:
         ALTER TABLE table_name ADD index(c);
      删除索引:
         ALTER TABLE table_name DROP index c;
         ALTER TABLE table_name DROP constraint indexName;  -- Oracle
    使用 ALTER 命令添加和删除主键
      添加主键索引:
         ALTER TABLE table_name MODIFY id int not null;
         ALTER TABLE table_name ADD primary key (id);
      删除主键索引:
         ALTER TABLE table_name DROP primary key;
    显示索引信息:
       show index from table_name;

临时表
  临时表只在连接时可见,关闭连接时自动删除表并释放所有空间
  创建临时表:
     CREATE temporary table t(...);
  删除临时表:
     DROP table t;
  other:
     CREATE temporary t as( SELECT * FROM table_name );
  eg:
    Create Global Temporary Table Table_Name
    (
      v_ename VARCHAR2(255),
      v_classtype VARCHAR2(255) 
    )
    On Commit Preserve Rows;
    select * from Table_Name;

on commit delete rows
  事务完成,临时表中的数据就会消失
on commit preserve rows
  会话结束,临时表中的数据就会消失
注意：创建了临时表之后,对于临时表的定义是永久的存放在数

据库中的

复制表
  完全复制数据表,包括表的结构,索引,默认值等,仅仅使用 CREATE table ... SELECT 命令是无法实现的
  复制步骤:
    1.使用 show CREATE tableName; 命令获取创建数据表语句,该语句包含了原数据表的结构,索引等
    2.复制显示的 sql 语句,修改数据表名,并执行 sql 语句,通过以上命令将完全的复制数据表结构
    3.使用 INSERT into ... SELECT 语句复制表的内容
       INSERT into clone( table_name_id, table_name_title ) SELECT table_name_id,table_name_title from table_name;
  另一种复制方法:
    1. CREATE table clone like table_name;
    2. INSERT into clone SELECT * FROM table_name;

获取服务器元数据
   SELECT version()       服务器版本信息
   SELECT database()      当前数据库名(或者返回空)
   SELECT user()          当前用户名
   SELECT status          服务器状态
   show variables         服务器配置变量

统计重复数据
SELECT count(*) as repetitions,Course  FROM table_name1 group by Course having repetitions>1; 
SELECT distinct column_name,count(*) from table_name group by column_name having count(*)>10; > Oracle
过滤重复数据 > Oracle
SELECT distinct column_name FROM table_name;

删除重复数据
  方法一:
   CREATE table tmp SELECT col1,col2,col3 FROM table_name group by (col1,col2,col3);
   DROP table table_name;
   alter table tmp rename to table_name;
  方法二:
     alter ignore table table_name ADD primary key (col1,col2);

 sql 注入
  如果你通过网页获取用户输入的数据并将其插入数据库
  那么就有可能发生 sql 注入问题:通过 sql 命令插入到 web 表单提交或输入域名或页面请求的查询字符串,最终到达欺骗服务器执行恶意的 sql 命令
  我们必须确认用户输入的数据是安全的,必须对用户的数据进行过滤处理
  通过脚本过滤 sql 注入的字符
  防止 sql 注入需要注意以下几点:
    1.不信任用户的输入
    2.不适用动态拼接的 sql
    3.不使用管理员权限的数据库连接
    4.不把机密信息直接存放(加密)
    5.异常时少给提示,建议自定义异常
    6. sql 注入的检测方法一般采取辅助软件或网站平台来检测
      软件一般采用 sql 注入检测工具 jsky
      网站平台就有亿思网站安全平台检测工具
       MDCSOFT SCAN 等,采用 MDCSOFT-IPS 可有效防御 sql 注入, XSS 攻击等

导出数据
  普通导出:
     SELECT * FROM table_name into outfile 'D:\\exe\\mysql-8.0.20-winx64\\output\\table_name.txt';
  导出 CSV 格式:
     SELECT * FROM table_name into outfile '/tmp/table_name.txt' fields terminated by ',' enclosed by '"' lines terminated by '\r\n';
  自定义导出(各值用 , 隔开):
     SELECT * into outfile '/tmp/table_name.txt' fields terminated by ',' optionally enclosed by '"' lines terminated by '\n' from table_name;

导出数据库
  导出 sql 格式的数据:
    不用登录 mysql
    直接执行 mysqldump -h localhost -u root -p ding > D:\exe\mysql-8.0.20-winx64\output\sql.txt
    会需要输入密码

导入数据
   mysql 命令导入:
     mysql -u root -p root < [要导入的数据库数据的地址];
   source 导入:
    登录 mysql
     CREATE database [数据库名];  # 创建数据库
     use [数据库名];
     set names utf8;  # 设置编码
     source [数据库数据地址];  # 导入备份数据库
  使用 load data 导入 txt 文件数据
     load data local infile "[要导入的数据库数据的地址]" into table [导入数据的目标表名];

函数
  (略)

运算符
  (略)


 CREATE 创建表
CREATE table table_name(
  IDCard int unsigned auto_increment,
  Name varchar(20) not null,
  age int,
  SubmissionDate date,
  primary key (IDCard)
)engine=INNODB DEFAULT charset=utf8;

CREATE TABLE table_name1(
  IDCard int unsigned auto_increment,
  Course varchar(20),
  grade int,
  primary key (IDCard)
)engine=INNODB DEFAULT charset=utf8;
 
 DROP 删除表
DROP TABLE table_name; 

 INSERT 插入
INSERT INTO table_name(column_name1[, column_name2[, ...]]) VALUES (value_1[,value_2[, ...]]);

insert ignore into 插入 > mysql
#如果插入数据库已存在的数据就会跳过这条语句,若没有就插入
insert ignore into table_name1(IDCard,Course,grade) values (9,"C",84);

 replace into 替换
需求表中有 PrimaryKey ,或 unique 
如果数据库已经存在数据,则用新数据替换
如果没有数据效果则和 insert into 一样
 REPLACE 语句会返回一个数来指示受影响的行的数目
该数是被删除和被插入的行数的和,如果对于一个单行 REPLACE 该数为1,则一行被插入同时没有行被删除
如果该数大于1,则在新行被插入前,有一个或多个旧行被删除
如果表包含多个唯一索引,并且新行复制了在不同的唯一索引中的不同旧行的值,则有可能是一个单一行替换了多个旧行
replace into table_nametb(id,name,age)values(1,"aa",12);

delete 删除/清空数据
delete FROM table_name where IDCard=4;

 binary 关键字
SELECT * FROM table_name where binary name='tom';  # 区分大小写

 update 更新
update table_name set age=100 where IDCard=2;
update table_name set age=age+1;  # 所有人 age 属性值+1

删除列
alter table tableName drop column columnName

 replace 替换
update table_name set age=replace(age,100,23) where IDCard>=1;

 union 操作符
# 将两个以上的 SELECT 语句结果拼接成一个结果
# distinct 为可选参数,删除结果中重复的数据,若不加参数默认情况下同为此效果,可使用 all 参数显示全部数据
SELECT Name FROM table_name where Name like "%m" union distinct SELECT Name FROM table_name where age>15;

 group by 分组
SELECT age,count(*) FROM table_name group by age;  # 各个年龄的人数
SELECT coalesce(name,"总数"),sum(age) as count FROM table_name group by name with rollup;  # 年龄和

* JOIN 笛卡尔积
  连接两张表,大致可分为内连接,外连接,右连接,左连接,自然连接
    SELECT * FROM table_name1 a left JOIN table_name2 b ON a.key=b.key;    -- 左连接
    SELECT * FROM table_name1 a inner JOIN table_name2 b ON a.key=b.key;   -- 内连接,交集
    SELECT * FROM table_name1 a right JOIN table_name2 b ON a.key=b.key;   -- 右连接
    SELECT * FROM table_name1 a left JOIN table_name2 b ON a.key=b.key where b.key is NULL;    -- 左连接-交集
    SELECT * FROM table_name1 a right JOIN table_name2 b ON a.key=b.key where a.key is NULL;   -- 右连接-交集
    SELECT * FROM table_name1 a full outer JOIN table_name2 b ON a.key=b.key;  -- 外连接,并集
    SELECT * FROM table_name1 a full outer JOIN table_name2 b ON a.key=b.key where a.key is NULL or b.key is NULL;  -- 并集-交集
  内连接
    四种写法: inner JOIN , where(等值连接) , straight_join , JOIN(省略 inner )
    SELECT * FROM table_name1 a inner join table_name2 b ON a.id=b.id;
    SELECT * FROM table_name1 a,table_name2 b where a.id=b.id;
    SELECT * FROM table_name1 a straight_join table_name2 b ON a.id=b.id;  --冷门很少用
    SELECT * FROM table_name1 a JOIN table_name2 b ON a.id=b.id;
    Q:内连接的四种写法中那种最优呢?
  自然连接
     nature JOIN
    自然连接可理解为 using 子句的简化版,它找出两个表中相同的列作为连接条件进行连接
    有左自然连接,右自然连接,普通自然连接
    找不同
      自然连接:SELECT * FROM t_blog NATURAL JOIN t_type;
      笛卡尔积:SELECT * FROM t_blog NATURA JOIN t_type;
      笛卡尔积:SELECT * FROM t_blog NATURE JOIN t_type;

using 子句
在连接 sql 语句中, ON 子句的语法格式为 a.id=b.id 
当模式设计对连接表的列采用相同的命名样式时,就可以使用 using 语法来简化 ON 语法,格式为: using(columnName);
即 using 的功能相当于 ON ,区别在于 using 指定一个属性名用于连接两个表,而 ON 指定一个条件
除此之外, select * 时 using 会除去 using 的列,而 ON 不会

join 原理
   Nested Loop Join(NLJ) 算法
    嵌套循环算法,循环外层是驱动表,内层是被驱动表
    驱动表会驱动被驱动表进行连接操作
    首先驱动表找到第一条记录,然后从头扫描被驱动表,逐一查找与驱动表第一条记录匹配的记录,然后连接起来形成结果表中的一条记录
    被驱动表查找完后再从驱动表中取出第二条记录,然后从头扫描被驱动表,逐一查找与驱动表第二条记录匹配的记录,连接起来形成结果表的第二条记录
    重复上述操作,直到驱动表的全部记录都处理完毕为止,这就是嵌套循环连接算法的基本思想,伪代码如下:
      foreach row1 FROM t1
          foreach row2 FROM t2
              if row2 match row1 //row2与row1匹配，满足连接条件
                  join row1 and row2 into result //连接row1和row2加入结果集
   Block Nested Loop Join(BNLJ) 算法
    块嵌套循环算法,可看作对 NLJ 的优化
    大致思想就是建立一个缓存区,一次从驱动表中取出多条记录,然后扫描被驱动表
    被驱动表的每条记录都尝试与缓存区中的多条记录匹配,如果存在则连接并加入结果集
    缓冲区越大,驱动表一次取出的记录就越多
    这个算法的优化思路就是减少内循环的次数从而提高表连接效率
  影响性能的因素
    <1>内循环的次数
      现在考虑这么一个场景,表t1有100条记录,表t2有10000条记录
      那么t1驱动t2与t2驱动t1,它们之间再效率上孰优孰劣?如果单纯的分析指令执行次数,他们都是100*10000
      但考虑到加载表的次数呢?首先分析t1驱动t2,t1表加载1次,t2表需要加载100次
      反过来分析t2驱动t1,t2表首先加载1次,但是t1表要加载10000次,所以,t1驱动t2的效率要优于t2驱动t1的效率
      由此得出,小表驱动大表能够减少内循环的次数从而提高连接效率
      此外,如果使用 BNLJ 算法通过扩大一次缓存区的大小也能减小内循环的次数
      由此可得,设置合理的缓冲区大小能够提高连接效率
      扫描被驱动表寻找合适的记录可看作一个查询操作,而建立索引可提高查询效率
      由此可得,在被驱动表建立索引能够提高连接效率
      假设t1表驱动t2表进行连接操作,连接条件t1.id=t2.id,而且要求查询结果对id排序
      现在有两种选择
      方式一:[ ... order by t1.id ]
      方式二:[ ... order by t2.id ]
      若用方式一,可以先对t1进行排序然后执行表连接算法
      若用方式二,只能在执行表连接算法后对结果进行排序,效率自然低下
      由此可得,优先选择驱动表的属性进行排序能提高连接效率
  优化内循环的次数
    内循环的次数受驱动表的记录数所影响,驱动表记录数越多,内循环就越多,连接效率就越低,所以尽量小表驱动大表
    但是表的记录数是会变化的,是否存在一劳永逸的写法呢?
     mysql 自带的 Optimizer 会优化内连接,优化策略就是小表驱动大表,所以以后内连接不要纠结谁内连接谁了,直接让 mysql 去判断吧
  优化扫描速度
    建立索引
    在左连接中,左表是驱动表,右表是被驱动表,想要快速查找被驱动表中匹配的记录,可在右表中建索引从而提高连接性能
    在右连接中,右表是驱动表,左表是被驱动表,想要快速查找被驱动表中匹配的记录,可在左表中建索引从而提高连接性能
    在内连接中, mysql Optimizer 会对内连接做优化,不管谁内连接谁,都是小表驱动大表
    所以如果要优化内连接,可以在大表上建立索引以提高性能,在小表上建立索引时, mysql Optimizer 会认为用大表驱动小表效率更快,转而用大表驱动小表
    想要从快速匹配的角度优化 join ,首先就是找出谁是驱动表,谁是被驱动表,然后在被驱动表上建立索引即可

order by 排序 > MYSQL,ORACLE
select * FROM table_name order by age ASC;  # 升序(默认)
select * FROM table_name order by age DESC;  # 降序

where 条件
SELECT * FROM table_name where age>=16;

like 模糊匹配
SELECT * FROM table_name where Name like '%m';  # 以 m 结尾
SELECT * FROM table_name where Name like 'J%';  # 以 J 开头
SELECT * FROM table_name where Name like '_i_';  # 三位且中间为 i 
(更多见正则表达式)

NULL 处理
SELECT *,age+ifnull(SubmissionDate,100) FROM table_name;  // 若值为 NULL 则用指定值代替

正则表达式
 mysql 既可以通过 like...% 来进行模糊匹配,同样也支持正则表达式匹配
 mysql 使用 regexp 操作符来进行正则表达式匹配
 regexp 操作符
^          匹配输入字符串的开始位置
$          匹配输入字符串的结束位置
.          匹配除 \n 之外的任何单一字符 
[]         字符集合,匹配包含的任意一个字符
[^]        负值字符集合,匹配未包含的任意一个字符
|          或
*          匹配前面的子表达式零次或多次
+          匹配前面的子表达式一次或多次 
{n}         n 为非负整数,匹配 n 次
{n,m}       m 和 n 均为非负整数,其中 n<=m ,最少匹配 n 次且最多匹配 m 次
eg:
SELECT Name FROM table_name where Name regexp '^J';
SELECT Name FROM table_name where Name regexp 'k$';
SELECT Name FROM table_name where Name regexp 'ar';

ALTER 命令
--删除列 > MYSQL,ORACLE(表示 MYSQL 与 ORACLE 的语法是一样的)
ALTER TABLE table_name DROP column column_name;
ALTER TABLE table_name DROP column_name1[, column_name2[, ...]];
--增加列 > MYSQL,ORACLE
ALTER TABLE table_name ADD column_name column_type [DEFAULT column_value [not null]];
ALTER TABLE table_name ADD (column_name1 column_type1[, column_name2 column_type2[, ...]])
--更改列名,也可使用 change
ALTER TABLE table_name MODIFY old_column_name new_column_name new_column_type; > MYSQL
ALTER TABLE table_name rename column old_column_name TO new_column_name; > ORACLE
ALTER TABLE table_name MODIFY (column_name column_type); > ORACLE
--列类型更改
ALTER TABLE table_name MODIFY column_name new_column_type; > MYSQL
ALTER TABLE table_name MODIFY (column_name column_type); > ORACLE
--更改列类型以及默认值
ALTER TABLE table_name change column_name column_type NOT NULL DEFAULT column_value; > MYSQL
--更改默认值
ALTER TABLE table_name ALTER column_name set DEFAULT column_value; > MYSQL
--删除默认值
ALTER TABLE table_name ALTER column_name DROP DEFAULT; > MYSQL
--更改表类型
ALTER TABLE table_name engine=myisam;  # 将 table_name 表的类型更改为 myisam > MYSQL
--修改表名
ALTER TABLE table_name rename TO new_table_name; > MYSQL
--添加外键
ALTER TABLE A_table_name ADD constraint fk_name FOREIGN KEY(A_column_name) references B_table_name(B_column_name); > ORACLE
--删除外键
ALTER TABLE table_name DROP FOREIGN KEY column_name; > MYSQL
ALTER TABLE table_name DROP constraint fk_name; > ORACLE

 auto_increment 自增序列
CREATE TABLE table_name(
  id INT unsigned NOT NULL auto_increment;
);  # 创建表时设置为自增列,默认从1开始
CREATE TABLE table_name(
  id INT unsigned NOT NULL auto_increment;
)engine=innodb auto_increment=100 charset=utf8;  # 从100开始
ALTER TABLE table_name id auto_increment=100;  # 从100开始
#重置序列
   ALTER TABLE table_name drop id;
   ALTER TABLE table_name ADD id INT unsigned NOT NULL auto_increment first,ADD PRIMARY KEY (id);

 > Oracle
SELECT * FROM all_tab_comments       查询所有用户的表,视图等
SELECT * FROM user_tab_comments      查询本用户的表,视图等(查询条件为表名时值需大写)
SELECT * FROM all_col_comments       查询所有用户的表的列名和注释
SELECT * FROM user_col_comments      查询本用户的表的列名和注释
SELECT * FROM all_tab_columns        查询所有用户的表的列名等信息
SELECT * FROM user_tab_columns       查询本用户的表的列名等信息

Q: => 的含义
A: => 是 Oracle 中调用存储过程的时候指定参数名进行调用
  一般指某些参数有默认值的时候你需要跳过某些参数来进行调用
  eg:
    CREATE OR REPLACE PROCEDURE HelloWorld3 (
        p_user_name VARCHAR2,
        p_val1 VARCHAR2 DEFAULT ' Good Moning,',
        p_val2 VARCHAR2 DEFAULT ' Nice to Meet you'
    )
    AS BEGIN
    dbms_output.put_line('Hello ' || p_user_name || p_val1 || p_val2 || '!');
    END HelloWorld3;

--查询指定条数的数据 > Oracle
SELECT * FROM customer WHERE ROWNUM < 101

--ASCII(X):返回指定列的 ASCII 码 > Oracle
SELECT ASCII(column_name) FROM table_name;

--CONCAT(X,Y):连接多个字段 > Oracle
SELECT CONCAT(column_name1,column_name2) FROM table_name;
SELECT CONCAT(CONCAT(column_name1,column_name2),column_name3) FROM employees;

S1||S2:将字符串S1,S2连接成一个新的字符串
SELECT '1+1='||'2' FROM table_name;
  

--INSTR(X,Str[,N]):查找指定字符(串)在指定列的位置 > Oracle
SElECT INSTR(column_name,[指定字符串],[指定从第几位开始查找(可选参数)]),column_name FROM table_name;

--LENGTH(X):获取指定列的长度
SELECT LENGTH(column_name),column_name FROM table_name;

--LOWER(X):将指定列的大写字母转换成小写字母 > Oracle
SELECT LOWER(column_name),column_name FROM table_name;

--UPPER(X):将指定列的小写字母转换成大写字母 > Oracle
SELECT UPPER(column_name),column_name FROM table_name;

--LTRIM(X[,Str]):按照特殊规则截去指定列的指定字符,可选参数为空则截去空格 > Oracle
SELECT LTRIM(column_name,[截去的字符串(可选参数)]) FROM table_name;
SELECT LTRIM('a1a2a3a4a5a6a7a8a9a','a1') FROM table_name;  --结果:2a3a4a5a6a7a8a9a
SELECT LTRIM('a1aaa1a4a5a6a7a8a9a','a1'),code FROM table_name;  --结果:4a5a6a7a8a9a
SELECT LTRIM('0a1a2a3a4a5a6a7a8a9a','a1') FROM table_name;  --结果:0a1a2a3a4a5a6a7a8a9a

--RTRIM(X[,Str]):按照特殊规则截去指定列的指定字符,可选参数为空则截去空格 > Oracle
SELECT LTRIM(column_name,[截去的字符串(可选参数)]) FROM table_name;

--TRIM([Str FROM]Y):按照特殊规则截去指定列的指定字符,可选参数为空则截去空格 > Oracle
SELECT TRIM([截去的字符串(可选参数) FROM ]column_name) FROM table_name;

--REPLACE(X,Str1,Str2):将指定字符替换 > Oracle
SELECT REPLACE(column_name,old_char,new_char),column_name FROM table_name;
UPDATE table_name SET column_name=REPLACE(column_name,'[old_str]','[new_str]') WHERE column_name LIKE '%%';

--SUBSTR(X,N1[,N2]):从指定列的指定位置截取指定长度的字符(串) > Oracle
SELECT SUBSTR(code,start_index[,length(可选参数,默认到末尾)]),code FROM table_name;

--ABS(X):取 X 的绝对值
SELECT ABS(column_name) FROM table_name;

--ACOS(X):取反余弦(xián)
SELECT ACOS(column_name) FROM table_name;

--COS(X):余弦
SELECT COS(column_name) FROM table_name;

--CEIL(X):大于或等于指定列的最小值
SELECT CEIL(column_name) FROM table_name;

--FLOOR(X):小于或等于指定列的最大值
SELECT FLOOR(column_name) FROM table_name;

--LOG(X,Y): X 为底 Y 的对数
SELECT LOG(column_name1,column_name2) FROM table_name;

--MOD(X,Y): X 除以 Y 的余数
SELECT MOD(column_name1,column_name2) FROM table_name;

--POWER(X,Y): X 的 Y 次幂
SELECT POWER(column_name1,column_name2) FROM table_name;

--ROUND(X,[Y]): X 在第 Y 位四舍五入
SELECT ROUND(column_name) FROM table_name;
ROUND(5.654,2)=5.65
ROUND(351.654,-2)=400

--SQRT(X): X 的平方根
SELECT SQRT(column_name) FROM table_name;

--TRUNC(X[,Y]): X 在第 Y 位截断
SELECT TRUNC(column_name[,N(整数,默认0,四舍五入保留整数,负数往高位,正数往低位)]) FROM table_name;
!与 ROUND() 类似

--ADD_MONTHS(D,N):指定日期加指定月数后的新日期
SELECT SYSDATE,ADD_MONTHS(SYSTEM,5) FROM table_name;

--LAST_DAY(D):指定日期的最后一天
SELECT SYSDATE,LAST_DAY(SYSDATE) FROM table_name;

--ROUND(d[,FMT]):返回指定日期以 FMT 为格式的四舍五入后的日期值
 FMT 参数:
  'DDD':根据指定日期的 hhmmss 进行四舍五入确定 DAY 的值
  'DAY':根据指定日期的 DAY 与其最近周的周日进行判断,取最近的那个周日的 DAY
  'MONTH':根据指定日期的 DAY 与其最近月的1号进行判断,取最近的那个月的 MONTH
  'YEAR':根据指定日期的 MONTH 与其最近年的1号进行判断,取最近的那个年的 YEAR
  默认 'DDD'
SELECT SYSDATE,ROUND(SYSDATE),ROUND(SYSDATE,'day'),ROUND(SYSDATE,'month'),ROUND(SYSDATE,'year') FROM table_name;

--EXTRACT(FMT FROM D):提取日期中的特定部分

to_char(N):将数字(N)转换成字符(Oracle)
SELECT to_char(N) FROM table_name;

to_date2(S,[转换格式]):将字符(S)转换成日期(Oracle)
  转换格式:
    y      年;yy:年的最后两位,yyy:年的最后三位
    m      月;mm:用两位数表示月份,mon:简写(nov),month:全称(november)
    d      日;dd:当月第几天,ddd:当年第几天,dy:当周第几天且简写(fri),day:当周第几天且全写(friday)
    h      时;hh:两位数表示12小时制,hh24:两位数表示24小时制
    m      分;mi:两位数表示分钟
    s      秒;ss:两位数表示秒
    q      季;q:一位数表示季度(1-4)
    w      周;ww:当年第几周,w:当月第几周
    24小时制的时间范围:00:00:00-23:59:59
    12小时制的时间范围: 1:00:00-12:59:59
SELECT to_date2(S,'yy-mm-dd hh24:mi:ss') FROM table_name;

CAL_1.before(CLA_2):比较日期(Date)大小,判断 CAL_1 是否比 CLA_2 早,返回类型 Boolean
  calendar_1.before(calendar_2);

存储过程(mysql)
  从mysql5.0 版本开始支持存储过程
  存储过程(Stored Procedure)是一种在数据库中存储复杂程序以便外部程序调用的一种数据库对象
  存储过程是为了完成特定功能的 SQL 语句集,经编译创建并保存在数据库中
  用户通过指定存储过程的名字并给定参数(需要时)来调用执行
  存储过程就是 SQL 语言层面的代码封装与重用
  优点
    存储过程可以封装并隐藏复杂的商业逻辑
    存储过程可传回值,并且可以接受参数
    存储过程无法使用 SELECT 指令来执行,因为它是子程序,与查看表,数据或用户定义函数不同
    存储过程可以用来在数据检验,强制实行商业逻辑等
  缺点
    定制化于特定的数据库上,切换到其它厂商的数据库系统时,需要重写原有的存储过程
    存储过程的性能调校与撰写,受限于各种数据库系统
  创建
    创建的存储过程保存在数据库的数据字典中
    CREATE
        [DEFINER = {user | CURRENT_USER}]
      PROCEDURE sp_name ([proc_parameter[,...]])
        [characteristic ...] routine_body
    
    proc_parameter:
      [ IN | OUT | INOUT ] param_name type

    characteristic:
      COMMENT 'string'
       | LANGUAGE SQL
       | [NOT] DETERMINISTIC
       | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }
       | SQL SECURITY { DEFINER | INVOKER }

    routine_body:
      Valid SQL routine statement

    [begin_label:] BEGIN
      [statement_list]
        ...
    END [end_label]
  声明语句结束符可以自定义
    DELIMITER $$
     或
    DELIMITER //
  声明存储过程
    CREATE PROCEDURE demo_in_parameter(IN p_in int)
  存储过程开始和结束符号
    BEGIN ... END
  变量赋值
    SET @p_in=1
  变量定义
    DECLARE l_int int unsigned DEFAULT 4;
  创建 mysql 存储过程,存储函数
    create procedure 存储过程名(参数)
  存储过程体
    create function 存储函数名(参数)
  实例

**最近写了一个 SQL
  查询排序后的第一条数据
    select * from powerSupplierOrders pso_c
    where rownum = 1
    order by pso_c.startlifecycle desc;
  此写法是错的,它是先取第一条数据,再排序

**在 PL/SQL 执行如下语句时报错"ORA_00922:选项缺失或无效"
    SET SERVEROUTPUT ON  
        DECLARE    
            v_ename VARCHAR2(255); 
            v_classtype VARCHAR2(255);  
            CURSOR emp_cursor IS    
            SELECT s.name,s.classtype FROM simpletypes s WHERE s.code='A181';   
            BEGIN  
        OPEN emp_cursor;   
        FETCH emp_cursor INTO v_ename,v_classtype;   
            DBMS_OUTPUT.PUT_LINE(v_ename||','||v_classtype);   
            CLOSE emp_cursor;   
            END; 
  原因是该语句应该使用命令行执行(在 Command Window 窗口中执行)
  若想在 SQL Window 中执行,将第一行去掉即可

set serveroutput on 命令
  该命令设置环境变量 serveroutput 为打开状态,从而使得 PL/SQL 程序能够在 SQL*plus 中输出结果
  你可以将其写在 *\oracle\product\10.2.0\*\sqlplus\admin 的 glogin.sql 中,打开 sqlplus 时会自动加载这个文件

其它 set 命令
  set colsep' ';            //-域输出分隔符
  set echo off;             //显示start启动的脚本中的每个sql命令，缺省为on
  set echo on               //设置运行命令是是否显示语句
  set feedback on;          //设置显示“已选择XX行”
  set feedback off;         //回显本次sql命令处理的记录条数，缺省为on
  set heading off;          //输出域标题，缺省为on
  set pagesize 0;           //输出每页行数，缺省为24,为了避免分页，可设定为0。
  set linesize 80;          //输出一行字符个数，缺省为80
  set numwidth 12;          //输出number类型域长度，缺省为10
  set termout off;          //显示脚本中的命令的执行结果，缺省为on
  set trimout on;           //去除标准输出每行的拖尾空格，缺省为off
  set trimspool on;         //去除重定向（spool）输出每行的拖尾空格，缺省为off
  set serveroutput on;      //设置允许显示输出类似dbms_output
  set timing on;            //设置显示“已用时间：XXXX”
  set autotrace on-;        //设置允许对执行的sql进行分析
  set verify off            //可以关闭和打开提示确认信息old 1和new 1的显示.

dbms_output.put_line() > Oracle[存储过程]
  可以输出参数的值


comment on table table_name is '[message]';
  为表添加注释

comment on column table_name.column_name is '[message]';
  为指定表的指定列添加注释

dbms_lob.substr(column_name)
  将类型为 CLOB 的列转换为 String

dbms_lob.compare(column_name, [char/CLOB])
  比较两个 CLOB 类型是否相等, char 类型也可以

dbms_lob.instr(column_name, [char], [起始位置,从1开始] ,[第几次])
  判断指定字符串是否存在 CLOB 中

查看指定表的结构
  select dbms_metadata.get_ddl('TABLE','MARKETINGPLANS') from Dual; > Oracle

f'f
select * from user_cons_columns cl 
where 1=1
and cl.column_name = 'PREFERENTIALPOLICIESID' 
--and cl.table_name='PREFERENTIALPOLICIES'
and cl.position='1';

**********实例**********
1.存储过程01
DECLARE
   vConfigs VARCHAR2(4000);
   vFiveSubjectName VARCHAR2(4000);
   vSubjectName VARCHAR2(4000);
   vProductOfferings VARCHAR2(4000);
   vProductOfferingName VARCHAR2(4000);
   vOperationRoleName VARCHAR2(4000);
   vSubjectCode VARCHAR2(255);
   vProductOfferingCode VARCHAR2(255);
   vSubjectId NUMBER(19);
   vProductOfferingId NUMBER(19);
   vNextobjectid NUMBER(19);
   vRows NUMBER(19);
   i INTEGER := 1;
   BEGIN
   FOR cur IN (select * from configurations c where c.code='InteractionPoFinanceSubject') LOOP
       FOR res IN ( with a as (select regexp_substr(cur.value, '[^;]+', 1, rownum) AS str1 from dual
                             connect by rownum <= length(cur.value) - length(replace(cur.value, ':', '')) + 1) 
                             select * from a) LOOP
           vFiveSubjectName := regexp_substr(res.str1, '[^:]+', 1);
           vProductOfferings := regexp_substr(res.str1, '[^:]+', 1, 2);
           if vFiveSubjectName is not null then
               select fsc.id,fsc.name into vSubjectId,vSubjectName 
                   from financesubjectcombinations fsc
                   join FINANCESUBJECTTYPES fst on fst.id=fsc.fivesubjectid
                   where fst.name=vFiveSubjectName;
           end if;
           if vProductOfferings is not null then 
               FOR productOfferings IN ( with a as (select regexp_substr(vProductOfferings, '[^,]+', 1, rownum) AS str2 from dual
                                                  connect by rownum <= length(vProductOfferings) - length(replace(vProductOfferings, ',', '')) + 1) 
                                                  select * from a) LOOP
                   BEGIN
                       select po.id,po.name into vProductOfferingId,vProductOfferingName from Productofferings po 
                           where po.code = productOfferings.Str2;
                   END;
                   vNextobjectid := nextobjectid;
                   vRows := 0;
                   BEGIN
                       select count(*) into vRows from FinanceSubjectCombinationConfs pscc 
                           where pscc.productofferingid = vProductOfferingId;
                   END;
                   dbms_output.put_line('商品id:'||vProductOfferingId);
                   if vRows = 0 then
                     i := i+1;
                     insert into 
                         FinanceSubjectCombinationConfs(ID, startlifecycle, endlifecycle,code, SERIALNUMBER, financesubjectcombinationid, productofferingid)
                         values(vNextobjectid, SYSDATE, maxdate, vNextobjectid, 1, vSubjectId, vProductOfferingId);
                   end if;
                   if i>500 then
                       commit;
                       i := 0;
                   end if;
               END LOOP;
           end if;
       END LOOP;  
   END LOOP;
END;

2.存储过程02
DECLARE
   vFiveSubjectName VARCHAR2(4000);
   vProductOfferingCodes VARCHAR2(4000);
   vSubjectCode VARCHAR2(255);
   vSubjectId NUMBER(19);
   vProductOfferingId NUMBER(19);
   vNextobjectid NUMBER(19);
   vRows NUMBER(19);
   
   vConfiguration configurations%ROWTYPE;
   BEGIN
     
     SELECT * INTO vConfiguration from configurations c where c.code='InteractionPoFinanceSubject';
    
     FOR res IN ( with a as (select regexp_substr(vConfiguration.value, '[^;]+', 1, rownum) AS str1 from dual
                           connect by rownum <= length(vConfiguration.value) - length(replace(vConfiguration.Value, ':', '')) + 1) 
                           select * from a) LOOP
         vFiveSubjectName := regexp_substr(res.str1, '[^:]+', 1);
         vProductOfferingCodes := regexp_substr(res.str1, '[^:]+', 1, 2);
         
         -- dbms_output.put_line('vFiveSubjectName=' || vFiveSubjectName);
         -- dbms_output.put_line('vProductOfferingCodes=' || vProductOfferingCodes);
         
         
         if vFiveSubjectName is not null then
             select fsc.id into vSubjectId
                 from financesubjectcombinations fsc
                 join FINANCESUBJECTTYPES fst on fst.id=fsc.fivesubjectid
                 where fst.name=vFiveSubjectName;
         end if;
         
         if vProductOfferingCodes is not null then 
             FOR curProductOffering IN ( with a as (select regexp_substr(vProductOfferingCodes, '[^,]+', 1, rownum) AS productOfferingCode from dual
                                                connect by rownum <= length(vProductOfferingCodes) - length(replace(vProductOfferingCodes, ',', '')) + 1) 
                                                select * from a) LOOP
                 select po.id into vProductOfferingId from Productofferings po 
                 where po.code = curProductOffering.productOfferingCode;
                 
                 -- dbms_output.put_line('vFiveSubjectName=' || vFiveSubjectName);
                 
                 vNextobjectid := nextobjectid;
                 vRows := 0;
                 
                 select count(*) into vRows from FSCombinationPOConfigs pscc 
                 where pscc.productofferingid = vProductOfferingId;
                         
                 if vRows = 0 then
                   insert into 
                       FSCombinationPOConfigs(ID, startlifecycle, endlifecycle,code, SERIALNUMBER, financesubjectcombinationid, productofferingid)
                       values(vNextobjectid, SYSDATE, maxdate, vNextobjectid, 1, vSubjectId, vProductOfferingId);
                 end if;
                
             END LOOP;
         end if;
     END LOOP;  
END;