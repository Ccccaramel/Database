----------------------------- 基础 -----------------------------
数值类型
  类型	      大小      用途
  tinyint   	1 Bytes  小整数值
  smallint  	2 Bytes  大整数值
  mediumint  	3 Bytes  大整数值
  int/integer	4 Bytes  大整数值
  bigint	    8 Bytes  极大整数值
  float     	4 Bytes  单精度浮点数值
  double    	8 Bytes  双精度浮点数值
  DECIMAL   	...      小数值

日期和时间类型
  类型      大小(bytes)   范围                                    格式                用途
  date      3            1000-01-01/9999-12-31                   YYYY-MM-DD          日期值
  time      3            '-838:59:59'/'838:59:59'                HH:MM:SS            时间值或持续时间
  year      1            1901/2155                               YYYY                年份值
  datetime  8            1000-01-01 00:00:00/9999-12-31 23:59:59 YYYY-MM-DD HH:MM:SS 混合日期和时间值
  timestamp 4            1970-01-01 00:00:00/2038                YYYYMMDD HHMMSS     混合日期和时间值，时间戳
                         结束时间是第 2147483647 秒
                         北京时间 2038-1-19 11:14:07
                         格林尼治时间 2038年1月19日 凌晨 03:14:07

字符串类型
  类型       大小(bytes)	用途
  char       0-255        定长字符串
  varchar    0-65535      变长字符串
  tinyblob   0-255        不超过255个字符的二进制字符串
  tinytext   0-255        短文本字符串
  blob       0-65535      二进制形式的长文本数据
  text       0-65535      长文本数据
  mediumblob 0-16777215   二进制形式的中等长度文本数据
  mediumtext 0-16777215   中等长度文本数据
  longblob   0-4294967295 二进制形式的极大文本数据
  longtext   0-4294967295 极大文本数据

----------------------------- mysql -----------------------------
* 建议因管理员方式运行命令提示符,否则会提示"发生系统错误 5","拒绝访问"

* 下载 mysql(MySQL Community Downloads) 至本地
   Windows 操作系统中有两种安装 mysql 的方式:
    1.下载 MSI 点击安装
    2.下载 ZIP 无需安装解压即可使用
      此方法安装后默认是没有 my.ini 配置文件的,虽然可以通过命令行修改但重启之后就会失效
      解决方法:
        a.在 mysql 根目录下新建 my.ini 将以下代码复制进去并保存
            [mysql]
            default-character-set = utf8mb4
            [mysqld]
            port = 3306
            basedir = D:\exe\mysql-8.0.20-winx64
            max_connections=200
            character-set-server = utf8mb4
            default-storage-engine=INNODB
            secure_file_priv=D:\exe\mysql-8.0.20-winx64\output
          其中 basedir 根据实际 mysql 安装位置进行更改
          其中 secure_file_priv 为导出目录
        b.重新生成 data 文件
          在 bin 目录下创建一个空的 data 文件夹
          执行 mysqld --initialize --console 命令(非首次使用在执行前需确保 data 文件是空的)
          在输出的信息中包含 root 用户的初始密码
        c.安装服务
          以 以管理员身份运行 打开控制台并进入 mysql 的 bin 目录下
          执行 .\mysqld.exe --install
          * Windows PowerShell 执行某些命令时需要以 .\ 开头以表示信任此命令,而在控制台中则不需要,之后的命令中会交叉出现此两种格式
        d.启动服务
          服务窗口启动:计算机管理->服务-> mysql ->启动
           cmd 启动:进入 mysql 的 bin 目录下执行 net start mysql
        e.配置环境变量
          为了方便不用每次都需要进入 mysql 的 bin 目录下
          进入 系统属性 的 环境变量,找到 系统变量(S) 中的变量 Path 并点击 编辑(I)... ,点击 新建(N) 将 mysql.exe 的绝对路径(即 bin 目录)复制进去即可
          之后,你在控制台的任何目录下都可以登录 mysql

Q:如何启动并进入 mysql ?
A:启动 mysql 服务
    服务窗口启动:计算机管理->服务-> mysql ->启动
     cmd 启动: net start mysql
  登录
     ctrl+r -> cmd -> cd /d [ mysql 的 bin 目录路径](若配置了环境变量则可省去此步)
    执行命令 mysql -uroot -p ,密码为 root 即可进入
  退出
     exit/quit
  终止 mysql 服务(每次退出后不要忘记)
     net stop mysql

Q:如何解决使用 Navicat 连接 MySQL 出现2059错误?
A:原因:
     mysql8 之前的版本中加密规则是 mysql_native_password ,而在 mysql8 之后,加密规则是 caching_sha2_password
  解决-更改加密规则:
     alter user 'root'@'localhost' identified by 'root' password expire never;  # 更改加密方式
     alter user 'root'@'localhost' identified with mysql_native_password by 'root';  # 更新用户密码
     flush privileges;  // 刷新权限
    远程连接请将'localhost'换成'%';

Q:如何修改 root 的密码?
A:执行 alter user '[用户名]'@'localhost' identified by '[新密码]';

* 常用命令
  查看 mysql 服务状态           sc query mysql
  启动 mysql 服务               net start mysql 
  终止 mysql 服务               net stop mysql
  退出 mysql                    exit/quit                    
  列出所有数据库                 show databases;
  创建数据库                     create database 数据库名;
  删除指定数据库                 drop table [数据库名];                                                                  
  选择并进入指定数据库           use [数据库名];                                                           
  列出当前数据库的所有表         show tables;                                                                                                       
  查看 mysql 的端口号           show global variables like 'port'; 
  查看当前注册用户               select user,host,port from mysql.user;                             
  修改 root 用户密码            alter user '[用户名]'@'localhost' identified by '[新密码]';   
  查看 secure-file-priv 值      show variables like '%secure%';

Q:如何获取 mysql 的 jar 包?
A:进入 https://dev.mysql.com/downloads/connector/j/ 
  下拉菜单选择 Platform Independent 项,下载后解压即在文件夹中

Q: eclipse 的 Java 项目如何连接 mysql ?
A: Java 连接 mysql 需要驱动包,即 jar 包
  右键你的项目-> Build Path ->Configure Build Path ->Libraries -> Add External JARs -> Apply 即可
  ( 代码详见 JavaMySQL.java )

Q: eclipse 的 JavaWeb 项目如何连接 mysql ?
A: 导入 jar 包(同上) 
   代码与 Java 项目基本相同,但不需要注册 JDBC 驱动!
   把 jar 包拷贝到 Tomcat 的 lib 目录下即可

Q:导出数据时报错:
   The MySQL server is running with the --secure-file-priv option so it cannot execute this statement
  如何解决?
A:执行 show variables like '%secure%'; 发现 secure-file-priv 值为 NULL ,代表禁止导出,

* mysql NULL 值处理
  当查询条件的字段为 NULL 时,该命令可能会无法工作
  未处理此类情况, mysql 提供了三大运算符:
    IS NULL:当列的值是 NULL ,此运算符返回 true
    IS NOT NULL:当列的值不为 NULL ,运算符返回 true
    <=>:比较运算符(不同于 = 运算符),当比较的两个值相等或都为 NULL 时返回 true
  不要使用 ==NULL 或 !=NULL 在列中查找 NULL 值
  在 mysql 中, NULL 值与任何其它值的比较(即使是 NULL )永远返回 NULL ,即 NULL==NULL 返回 NULL
     select *,age+ifnull(SubmissionDate,100) from test;

 mysql 事务
  mysql 主要用于处理操作量大,复杂度高的数据
  例如当你删除一个员工信息,那么你既要删除员工的基本资料,还要删除该员工的其它相关信息,这些数据库操作语句就构成一个事务
  在 mysql 中只有使用 innodb 数据库引擎的数据库或表才支持事务
  事务处理可以用来维护数据库的完整性,保证成批的 sql 语句要么全部执行,要么全部执行
  事务的4个必要条件:
    1.原子性
      一个事务中的所有操作,要么全部完成,要么全部未完成(已执行的会回滚)
    2.一致性
      在事务开始前和事务结束后,数据库的完整性没有被破坏
    3.独立性(隔离性)
      数据库允许多个并发事务同时对数据进行读写和修改的能力,可以防止多个事务并发执行时由于交叉执行而导致数据不一致
    4.持久性
      事务处理后,对数据的修改是永久的
  mysql 命令行的默认设置下,事务都是自动提交的,即执行 sql 语句后就会马上执行 commit 操作
  显式开启事务,你可以执行 begin 或 start transaction ,若想禁止自动提交可执行 set autocommit=0

 mysql 事务控制语句
  1. begin 或 start transaction 显式地开启一个事务
  2. commit 也可以使用 commit work ,二者等价, commit 会提交事务,并使已对数据库进行地所有修改成为永久性
  3. rollback 也可使用 rollback work ,二者等价, 回滚会结束用户地事务,并撤销正在进行的所有未提交的修改
  4. savepoint identifier , savepoint 允许在事务中创建一个保存点,一个事务中可以有多个 savepoint
  5. release savepoint identifier 删除一个事务的保存点,当没有指定的保存点时,执行该语句会抛出一个异常
  6. rollback to identifier 把事务回滚到标记点
  7. set transaction 用来设置事务的隔离级别
     innodb 存储引擎提供事务的隔离级别有 read uncommitted , read committed , repeatable read 和 serializable

 mysql 事务处理的主要两种方法  
  1.用 begin , rollback , commit 来实现
    a. begin 开始一个事务
    b. rollback 事务回滚
    c. commit 事务确认
  2.直接用 set 来改变 mysql 的自动提交模式
    a. set autocommit=0禁止自动提交
    b. set autocommit=1 开启自动提交

 mysql 索引
   mysql 索引的建立对于 myslq 的高效运行是很重要的,索引可大大提高 mysql 的检索速度,但也会降低更新表的速度,占用磁盘空间的索引文件
  索引分单列索引和组合索引
    单列索引:只包含单个列,一个表可以有多个单列索引
    组合索引:一个索引包含多个列
  索引也是一张表
  普通索引:
    最基本的索引,无任何限制
    创建索引:
       create index index_name on table_name(column_name);
    添加索引:
       alter table table_name add index index_name(column_name);
    创建表时指定:
       create table table_name(
         ID int not null,
         name varchar(16) not null,
         index [indexName] (name(length))
       );
    删除索引:
       drop index [indexName] on table_name;
  唯一索引:
    索引列的值必须唯一,但允许有空值,若为组合索引,则列值的索引必须唯一
    创建索引:
       create unique index indexName on table_name(username(length))
    修改索引:
       alter table table_name add unique [indexName] (username(length))
    创建时指定:
       create table table_name(
         ID int not null,
         username varchar(16) not null,
         unique [indexName] (username(length))
       );
    使用 alter 命令添加和删除索引
      1.添加一个主键 
         alter table table_name add primary key(column_list);
      2.创建索引的值必须是唯一的
         alter table table_name add unique indexName(column_list);
      3.添加普通索引,索引值会出现多次
         alter table table_name add indexName(column_list);
      4.指定索引为 fulltext ,用于全文索引 
         alter table table_name add fulltext indexName(column_list);
      添加索引:
         alter table table_name add index(c);
      删除索引:
         alter table table_name drop index c;
    使用 alter 命令添加和删除主键
      添加主键索引:
         alter table test modify id int not null;
         alter table test add primary key (id);
      删除主键索引:
         alter table test drop primary key;
    显示索引信息:
       show index from test;

 mysql 临时表
  临时表只在连接时可见,关闭连接时自动删除表并释放所有空间
  创建临时表:
     create temporary table t(...);
  删除临时表:
     drop table t;
  other:
     create temporary t as( select *from test );

复制表
  完全复制数据表,包括表的结构,索引,默认值等,仅仅使用 create table ... select 命令是无法实现的
  复制步骤:
    1.使用 show create tableName; 命令获取创建数据表语句,该语句包含了原数据表的结构,索引等
    2.复制显示的 sql 语句,修改数据表名,并执行 sql 语句,通过以上命令将完全的复制数据表结构
    3.使用 insert into ... select 语句复制表的内容
       insert into clone( test_id, test_title ) select test_id,test_title from test;
  另一种复制方法:
    1. create table clone like test;
    2. insert into clone select * from test;

获取服务器元数据
   select version()       服务器版本信息
   select database()      当前数据库名(或者返回空)
   select user()          当前用户名
   select status          服务器状态
   show variables         服务器配置变量

统计重复数据
  功能类似于 where 但 where 关键字无法与聚合函数一起使用
   select count(*) as repetitions,Course from test1 group by Course having repetitions>1;

过滤重复数据
   select distinct Course from test1;

删除重复数据
  方法一:
   create table tmp select col1,col2,col3 from test group by (col1,col2,col3);
   drop table test;
   alter table tmp rename to test;
  方法二:
     alter ignore table test add primary key (col1,col2);

mysql 注入
  如果你通过网页获取用户输入的数据并将其插入一个 mysql 数据库
  那么就有可能发生 sql 注入问题:通过 sql 命令插入到 web 表单提交或输入域名或页面请求的查询字符串,最终到达欺骗服务器执行恶意的 sql 命令
  我们必须确认用户输入的数据是安全的,必须对用户的数据进行过滤处理
  通过脚本过滤 sql 注入的字符
  防止 sql 注入需要注意以下几点:
    1.不信任用户的输入
    2.不适用动态拼接的 sql
    3.不使用管理员权限的数据库连接
    4.不把机密信息直接存放(加密)
    5.异常时少给提示,建议自定义异常
    6. sql 注入的检测方法一般采取辅助软件或网站平台来检测
      软件一般采用 sql 注入检测工具 jsky
      网站平台就有亿思网站安全平台检测工具
       MDCSOFT SCAN 等,采用 MDCSOFT-IPS 可有效防御 sql 注入, XSS 攻击等

导出数据
  普通导出:
     select * from test into outfile 'D:\\exe\\mysql-8.0.20-winx64\\output\\test.txt';
  导出 CSV 格式:
     select * from test into outfile '/tmp/test.txt' fields terminated by ',' enclosed by '"' lines terminated by '\r\n';
  自定义导出(各值用 , 隔开):
     select * into outfile '/tmp/test.txt' fields terminated by ',' optionally enclosed by '"' lines terminated by '\n' from test;

导出数据库
  导出 sql 格式的数据:
    不用登录 mysql
    直接执行 mysqldump -h localhost -u root -p ding > D:\exe\mysql-8.0.20-winx64\output\sql.txt
    会需要输入密码

导入数据
   mysql 命令导入:
     mysql -u root -p root < [要导入的数据库数据的地址];
   source 导入:
    登录 mysql
     create database [数据库名];  # 创建数据库
     use [数据库名];
     set names utf8;  # 设置编码
     source [数据库数据地址];  # 导入备份数据库
  使用 load data 导入 txt 文件数据
     load data local infile "[要导入的数据库数据的地址]" into table [导入数据的目标表名];

 mysql 函数
  (略)

 myslq 运算符
  (略)

查看表的索引
  show index from table_name;
   Non_unique        如果索引不能包括重复词,则为 0 ,如果可以,则为 1
   Key_name          索引的名称
   Seq_in_index      索引中的列序列号,从 1 开始
   Column_name       列名称
   Collation         列以什么方式存储在索引中,在 MySQL 中,有值 A (升序)或 NULL (无分类)
   Cardinality       索引中唯一值的数目的估计值.通过运行 ANALYZE TABLE 或 myisamchk -a 可以更新
                     基数根据被存储为整数的统计数据来计数,所以即使对于小型表,该值也没有必要是精确的
                     基数越大,当进行联合时, MySQL 使用该索引的机会就越大
   Sub_part          如果列只是被部分地编入索引,则为被编入索引的字符的数目,如果整列被编入索引,则为 NULL
   Packed            指示关键字如何被压缩,如果没有被压缩,则为 NULL
   Null              如果列含有 NULL ,则含有 YES ,如果没有,则该列含有 NO
   Index_type        用过的索引方法( BTREE FULLTEXT HASH RTREE)

删除表的索引
  先查看表的索引,获得待删除的索引的 Key_name
  再执行 alter table table_name drop index Key_name;

添加索引
  ALTER TABLE table_name ADD UNIQUE KEY([列名1],[列名2],...);
  !在表已存在数据的情况下会失败报错,可先清空表

ON DUPLICATE KEY UPDATE
  insert into table_name(name1,name2,name3,...)
  values(value1,value2,value3,...)
  ON DUPLICATE KEY UPDATE
  name_1=value_1,
  name_2=value_2,
  ...;
  此语法为 mysql 独有且表存在索引
  向表插入一组数据,若插入的索引字段(集)的数据(集)在表中不存在或不包含索引(集)则直接插入
  若存在则更新指定列(集)

查看表结构  
  show create table table_name;
  包含 foreign_key_name

删除外键
  alter table table_name drop foreign key foreign_key_name;
  这个 foreign_key_name 可不是你创建表时声明的另一张表的某一列的列名哦

添加外键
  alter table 表名 add constraint FK_ID foreign key(你的外键字段名) REFERENCES 外表表名(对应的表的主键字段名);

 create 创建表
create table test(
  IDCard int unsigned auto_increment,
  Name varchar(20) not null,
  age int,
  SubmissionDate date,
  primary key (IDCard)
)engine=INNODB default charset=utf8;

create table test1(
  IDCard int unsigned auto_increment,
  Course varchar(20),
  grade int,
  primary key (IDCard)
)engine=INNODB default charset=utf8;


delete 删除数据
  DML 语句,可回滚
  删除所有行,可作用于表和视图
    delete from test where IDCard=4;

drop 删除表
  DDL 语句,执行后无法回滚
  可作用于表和视图
  删除所有行,包括约束,索引,表结构
    drop table [表名]; 

truncate 关键字
  DDL 语句,仅删除所有行,表结构,约束,索引依旧存在,会重置表的自增值
  只能作用于表,不会激活与表有关的删除触发器,执行速度快且无法回滚
    truncate table [表名]; 

insert 插入
 insert into tableName([列名1],[列名2],...) valuse([值1],[值2],...);

insert ignore into 插入
#如果插入数据库已存在的数据就会跳过这条语句,若没有就插入
insert ignore into test1(IDCard,Course,grade) values (9,"C",84);

binary 关键字
select * from test where binary name='tom';  # 区分大小写

update 更新
update test set age=100 where IDCard=2;
update test set age=age+1;  # 所有人 age 属性值+1

replace 替换
  将[列名]字段为数据为[参数1]的全部替换为[参数2]
  update [表名] set [列名]=replace([列名],[参数1],[参数2]);

 union 操作符
# select name1,name2,name3,...
  from table_name1 [where conditions]
  union [all|distinct]
  select name1',name2',name3',...
  from table_name2
# 将两个以上的 select 语句结果组合到一个结果结合中,即合并结果集
# name 要检索的列
  table_name 要检索的数据表
  conditions 条件
  all 参数显示全部数据,即重复的数据也会显示
  distinct 为可选参数,删除结果中重复的数据,若不加参数默认情况下同为此效果

group by
  语句根据一个或多个列对结果集进行分组
  分组的列上我们可以使用 COUNT SUM AVG 等函数
    select age,count(*) from test group by age;  # 各个年龄的人数

with rollup
  在group分组字段的基础上再进行统计数据
    select age,sum(age) from student group by id with rollup;
    select coalesce(name,"总数"),sum(age) as count from test group by name with rollup;  # 年龄和

inner join 内连接
select t1.IDCard,t2.Course,t2.grade from test t1 inner join test1 t2 on t1.IDCard=t2.IDCard;  # 交集

left join 左连接
select t1.IDCard,t2.Course,t2.grade from test t1 left join test1 t2 on t1.IDCard=t2.IDCard;  # t1

right join 右连接
select t1.IDCard,t2.Course,t2.grade from test t1 right join test1 t2 on t1.IDCard=t2.IDCard;  # t2(删掉 t1 中一条数据)

order by
  数据排序
  ASC 升序
  DESC 降序
    select name1,name2,... from table_name order by name [ASC|DESC];

where
  select * from test where age>=16;

like
  select * from test where Name like '%m';  # 以 m 结尾
  select * from test where Name like 'J%';  # 以 J 开头
  select * from test where Name like '_i_';  # 三位且中间为 i 
  (更多见正则表达式)

NULL 处理
  select *,age+ifnull(SubmissionDate,100) from test;  // 若值为 NULL 则用指定值代替

正则表达式
 mysql 既可以通过 like...% 来进行模糊匹配,同样也支持正则表达式匹配
 mysql 使用 regexp 操作符来进行正则表达式匹配
 regexp 操作符
^          匹配输入字符串的开始位置
$          匹配输入字符串的结束位置
.          匹配除 \n 之外的任何单一字符 
[]         字符集合,匹配包含的任意一个字符
[^]        负值字符集合,匹配未包含的任意一个字符
|          或
*          匹配前面的子表达式零次或多次
+          匹配前面的子表达式一次或多次 
{n}         n 为非负整数,匹配 n 次
{n,m}       m 和 n 均为非负整数,其中 n<=m ,最少匹配 n 次且最多匹配 m 次
eg:
select Name from test where Name regexp '^J';
select Name from test where Name regexp 'k$';
select Name from test where Name regexp 'ar';

alter 命令
# 当需要修改数据表名或修改数据表字段时
alter table test drop SubmissionDate Data;  # 删除 SubmissionDate 列
alter talbe test add heigh int;  # 增加一个名为 heigh 列且类型为 int
alter talbe test modify heigh weight bigint;  # 将 heigh 列更名为 weight ,类型更改为 bigint , modify 也可使用 change
alter talbe test modify heigh heigh bigint;  # 将 heigh 列的类型更改为 bigint
alter talbe test change heigh int not null default 100;  # 将 heigh 列的属性更改为 not null 且默认值为100
alter talbe test alter heigh set default 100;  # 将 heigh 列的默认值改为100
alter talbe test alter heigh drop default;  # 将 heigh 列的默认值删除
alter talbe test engine=myisam;  # 将 test 表的类型更改为 myisam
alter talbe test rename to test2;  # 修改表名
alter table test drop foreign key CourseId;  # 删除外键

 auto_increment 自增序列
create table test(
  id int unsigned not null auto_increment;
);  # 创建表时设置为自增列,默认从1开始
create table test(
  id int unsigned not null auto_increment;
)engine=innodb auto_increment=100 charset=utf8;  # 从100开始
alter table test id auto_increment=100;  # 从100开始
#重置序列
   alter table test drop id;
   alter table test add id int unsigned not null auto_increment first,add primary key (id);

* 建议因管理员方式运行命令提示符

* 下载 mysql 至本地
   Windows 操作系统中有两种安装 mysql 的方式:
    1.下载 MSI 点击安装
    2.下载 ZIP 解压即可使用
      此方法安装后默认是没有 my.ini 配置文件的,虽然可以通过命令行修改但重启之后就会失效
      解决方法:
        a.在 mysql 根目录下新建 my.ini 将以下代码复制进去并保存
            [mysql]
            default-character-set = utf8mb4
            [mysqld]
            port = 3306
            basedir = D:\exe\mysql-8.0.20-winx64
            max_connections=200
            character-set-server = utf8mb4
            default-storage-engine=INNODB
          其中 basedir 根据实际 mysql 安装位置进行更改
        c.重新生成 data 文件
          执行 mysqld --initialize --console 命令(非首次使用在执行前需确保 data 文件是空的)
          在输出的信息中包含 root 用户的初始密码
        d.启动服务
          服务窗口启动:计算机管理->服务-> mysql ->启动
           cmd 启动:进入 mysql 的 bin 目录下执行 net start mysql

Q:如何启动并进入 mysql ?
A:启动 mysql 服务
    服务窗口启动:计算机管理->服务-> mysql ->启动
     cmd 启动: net start mysql
  登录
     ctrl+r -> cmd -> cd /d [ mysql 的 bin 目录路径](若配置了环境变量则可省去此步)
    执行命令 mysql -uroot -p ,密码为 root 即可进入
  退出
     exit/quit
  终止 mysql 服务(每次退出后不要忘记)
     net stop mysql

Q:如何解决使用 Navicat 连接 MySQL 出现2059错误?
A:原因:
     mysql8 之前的版本中加密规则是 mysql_native_password ,而在 mysql8 之后,加密规则是 caching_sha2_password
  解决-更改加密规则:
     alter user 'root'@'localhost' identtified by 'root' password expire never;  # 更改加密方式
     alter user 'root'@'localhost' identified with mysql_native_password by 'root';  # 更新用户密码
     flush privileges;  // 刷新权限
    远程连接请将'localhost'换成'%';

Q:如何修改 root 的密码?
A:执行 alter user '[用户名]'@'localhost' identified by '[新密码]';

* 常用命令
  查看 mysql 服务状态           sc query mysql
  启动 mysql 服务               net start mysql 
  终止 mysql 服务               net stop mysql
  退出 mysql                    exit/quit                    
  列出所有数据库                 show databases;    
  删除指定数据库                 drop table [数据库名];                                                                  
  选择并进入指定数据库           use [数据库名];                                                           
  列出当前数据库的所有表         show tables;                                                                                                       
  查看 mysql 的端口号           show global variables like 'port'; 
  查看当前注册用户               select user,host,port from mysql.user;                             
  修改 root 用户密码            alter user '[用户名]'@'localhost' identified by '[新密码]';   
  查看 secure-file-priv 值      show variables like '%secure%';

Q:如何获取 mysql 的 jar 包?
A:进入 https://dev.mysql.com/downloads/connector/j/ 
  下拉菜单选择 Platform Independent 项,下载后解压即在文件夹中

Q: eclipse 的 Java 项目如何连接 mysql ?
A: Java 连接 mysql 需要驱动包,即 jar 包
  右键你的项目-> Build Path ->Configure Build Path ->Libraries -> Add External JARs -> Apply 即可

Q:导出数据时报错:
   The MySQL server is running with the --secure-file-priv option so it cannot execute this statement
  如何解决?
A:执行 show variables like '%secure%'; 发现 secure-file-priv 值为 NULL ,代表禁止导出,

* mysql NULL 值处理
  当查询条件的字段为 NULL 时,该命令可能会无法工作
  未处理此类情况, mysql 提供了三大运算符:
    IS NULL:当列的值是 NULL ,此运算符返回 true
    IS NOT NULL:当列的值不为 NULL ,运算符返回 true
    <=>:比较运算符(不同于 = 运算符),当比较的两个值相等或都为 NULL 时返回 true
  不要使用 ==NULL 或 !=NULL 在列中查找 NULL 值
  在 mysql 中, NULL 值与任何其它值的比较(即使是 NULL )永远返回 NULL ,即 NULL==NULL 返回 NULL
     select *,age+ifnull(SubmissionDate,100) from test;

 mysql 事务
  mysql 主要用于处理操作量大,复杂度高的数据
  例如当你删除一个员工信息,那么你既要删除员工的基本资料,还要删除该员工的其它相关信息,这些数据库操作语句就构成一个事务
  在 mysql 中只有使用 innodb 数据库引擎的数据库或表才支持事务
  事务处理可以用来维护数据库的完整性,保证成批的 sql 语句要么全部执行,要么全部执行
  事务的4个必要条件:
    1.原子性
      一个事务中的所有操作,要么全部完成,要么全部未完成(已执行的会回滚)
    2.一致性
      在事务开始前和事务结束后,数据库的完整性没有被破坏
    3.独立性(隔离性)
      数据库允许多个并发事务同时对数据进行读写和修改的能力,可以防止多个事务并发执行时由于交叉执行而导致数据不一致
    4.持久性
      事务处理后,对数据的修改是永久的
  mysql 命令行的默认设置下,事务都是自动提交的,即执行 sql 语句后就会马上执行 commit 操作
  显式开启事务,你可以执行 begin 或 start transaction ,若想禁止自动提交可执行 set autocommit=0

 mysql 事务控制语句
  1. begin 或 start transaction 显式地开启一个事务
  2. commit 也可以使用 commit work ,二者等价, commit 会提交事务,并使已对数据库进行地所有修改成为永久性
  3. rollback 也可使用 rollback work ,二者等价, 回滚会结束用户地事务,并撤销正在进行的所有未提交的修改
  4. savepoint identifier , savepoint 允许在事务中创建一个保存点,一个事务中可以有多个 savepoint
  5. release savepoint identifier 删除一个事务的保存点,当没有指定的保存点时,执行该语句会抛出一个异常
  6. rollback to identifier 把事务回滚到标记点
  7. set transaction 用来设置事务的隔离级别
     innodb 存储引擎提供事务的隔离级别有 read uncommitted , read committed , repeatable read 和 serializable

 mysql 事务处理的主要两种方法  
  1.用 begin , rollback , commit 来实现
    a. begin 开始一个事务
    b. rollback 事务回滚
    c. commit 事务确认
  2.直接用 set 来改变 mysql 的自动提交模式
    a. set autocommit=0禁止自动提交
    b. set autocommit=1 开启自动提交

uuid()
  可用来生成时间和空间上都独一无二的值
  固定字符为36个字符

---样例---
insert into test(Name,age) values ("Tom",12);
insert into test(Name,age) values ("Marry",22);
insert into test(Name,age) values ("Jim",15);
insert into test(Name,age) values ("Kara",32);
insert into test(Name,age) values ("Apple",14);
insert into test(Name,age) values ("Jeck",16);
insert into test(Name,age) values ("Sock",21);
insert into test(Name,age) values ("Jarry",22);
insert into test(Name,age) values ("Jom",18);
insert into test(Name,age) values ("Mara",22);
insert into test(Name,age) values ("Opple",14);
insert into test(Name,age) values ("Jack",17);
insert into test(Name,age) values ("Seck",25);

insert into test1(IDCard,Course,grade) values (1,"PHP",98);
insert into test1(IDCard,Course,grade) values (1,"Java",76);
insert into test1(IDCard,Course,grade) values (1,"HTML",94);
insert into test1(IDCard,Course,grade) values (2,"PHP",73);
insert into test1(IDCard,Course,grade) values (2,"Java",98);
insert into test1(IDCard,Course,grade) values (2,"HTML",86);
insert into test1(IDCard,Course,grade) values (3,"PHP",72);
insert into test1(IDCard,Course,grade) values (3,"C",75);
insert into test1(IDCard,Course,grade) values (3,"HTML",74);
insert into test1(IDCard,Course,grade) values (4,"PHP",71);
insert into test1(IDCard,Course,grade) values (4,"Java",96);
insert into test1(IDCard,Course,grade) values (4,"HTML",94);
insert into test1(IDCard,Course,grade) values (5,"PHP",76);
insert into test1(IDCard,Course,grade) values (5,"Java",70);
insert into test1(IDCard,Course,grade) values (6,"PHP",85);
insert into test1(IDCard,Course,grade) values (6,"HTML",83);
insert into test1(IDCard,Course,grade) values (7,"PHP",88);
insert into test1(IDCard,Course,grade) values (7,"Java",93);
insert into test1(IDCard,Course,grade) values (8,"PHP",79);
insert into test1(IDCard,Course,grade) values (8,"C",78);
insert into test1(IDCard,Course,grade) values (8,"Java",93);
insert into test1(IDCard,Course,grade) values (8,"HTML",85);
insert into test1(IDCard,Course,grade) values (9,"PHP",73);
insert into test1(IDCard,Course,grade) values (9,"C",84);