----------------------------- 基础 -----------------------------
数值类型
  类型	      大小      用途
  tinyint   	1 Bytes  小整数值
  smallint  	2 Bytes  大整数值
  mediumint  	3 Bytes  大整数值
  int/integer	4 Bytes  大整数值
  bigint	    8 Bytes  极大整数值
  float     	4 Bytes  单精度浮点数值
  double    	8 Bytes  双精度浮点数值
  DECIMAL   	...      小数值

日期和时间类型
  类型      大小(bytes)   范围                                    格式                用途
  date      3            1000-01-01/9999-12-31                   YYYY-MM-DD          日期值
  time      3            '-838:59:59'/'838:59:59'                HH:MM:SS            时间值或持续时间
  year      1            1901/2155                               YYYY                年份值
  datetime  8            1000-01-01 00:00:00/9999-12-31 23:59:59 YYYY-MM-DD HH:MM:SS 混合日期和时间值
  timestamp 4            1970-01-01 00:00:00/2038                YYYYMMDD HHMMSS     混合日期和时间值，时间戳
                         结束时间是第 2147483647 秒
                         北京时间 2038-1-19 11:14:07
                         格林尼治时间 2038年1月19日 凌晨 03:14:07

字符串类型
  类型       大小(bytes)	用途
  char       0-255        定长字符串
  varchar    0-65535      变长字符串
  tinyblob   0-255        不超过255个字符的二进制字符串
  tinytext   0-255        短文本字符串
  blob       0-65535      二进制形式的长文本数据
  text       0-65535      长文本数据
  mediumblob 0-16777215   二进制形式的中等长度文本数据
  mediumtext 0-16777215   中等长度文本数据
  longblob   0-4294967295 二进制形式的极大文本数据
  longtext   0-4294967295 极大文本数据

----------------------------- mysql -----------------------------
* 建议因管理员方式运行命令提示符,否则会提示"发生系统错误 5","拒绝访问"

* 以 MySQL8 为例

* 下载 mysql(MySQL Community Downloads) 至本地
  Windows 操作系统中有两种安装 mysql 的方式:
    1.下载 MSI 点击安装
    2.下载 ZIP 无需安装解压即可使用
      此方法安装后默认是没有 my.ini 配置文件的,虽然可以通过命令行修改但重启之后就会失效
      解决方法:
        a.在 mysql 根目录下新建 my.ini 将以下代码复制进去并保存
            [mysql]
            default-character-set = utf8mb4
            [mysqld]
            port = 3306
            basedir = D:\exe\mysql-8.0.20-winx64
            max_connections=200
            character-set-server = utf8mb4
            default-storage-engine=INNODB
            secure_file_priv=D:\exe\mysql-8.0.20-winx64\output
          其中 basedir 根据实际 mysql 安装位置进行更改
          其中 secure_file_priv 为导出目录
        b.重新生成 data 文件
          在 bin 目录下创建一个空的 data 文件夹
          执行 mysqld --initialize --console 命令(非首次使用在执行前需确保 data 文件是空的)
          在输出的信息中包含 root 用户的初始密码
        c.安装服务
          以 以管理员身份运行 打开控制台并进入 mysql 的 bin 目录下
          执行 .\mysqld.exe --install
          * Windows PowerShell 执行某些命令时需要以 .\ 开头以表示信任此命令,而在控制台中则不需要,之后的命令中会交叉出现此两种格式
        d.启动服务
          服务窗口启动:计算机管理->服务-> mysql ->启动
           cmd 启动:进入 mysql 的 bin 目录下执行 net start mysql
        e.配置环境变量
          为了方便不用每次都需要进入 mysql 的 bin 目录下
          进入 系统属性 的 环境变量,找到 系统变量(S) 中的变量 Path 并点击 编辑(I)... ,点击 新建(N) 将 mysql.exe 的绝对路径(即 bin 目录)复制进去即可
          之后,你在控制台的任何目录下都可以登录 mysql
  Linux
    1.启动服务的两种方式
      service mysqld start
      systemctl mysqld start
    2.终止服务
      service mysqld stop
    3.重启服务
      service mysqld restart
    4.查看服务状态
      systemctl status mysqld
    5.重置密码
      找到 /etc/mycof
      在 [mysqld] 下行添加如下语句
        skip-grant-tables
      保存退出后重启 mysql 服务
      直接登录
        mysql -u root -p
      无密码可直接进入
      更改密码并刷新
        flush privileges;
        alter user '[用户名]'@'localhost' identified by '[新密码]';
        flush privileges;

Q:重置密码报错?
    alter user '[用户名]'@'localhost' identified by '[新密码]';
    ERROR 1396 (HY000): Operation ALTER USER failed for 'root'@'localhost'
A:可试一试将 localhost 改为 %
    use mysql;
    select Host,user from user;
      +-----------+------------------+
      | Host      | user             |
      +-----------+------------------+
      | %         | root             |
      | localhost | mysql.infoschema |
      | localhost | mysql.session    |
      | localhost | mysql.sys        |
      +-----------+------------------+
    


Q:如何启动并进入 mysql ?
A:启动 mysql 服务
    服务窗口启动:计算机管理->服务-> mysql ->启动
     cmd 启动: net start mysql
  登录
     ctrl+r -> cmd -> cd /d [ mysql 的 bin 目录路径](若配置了环境变量则可省去此步)
    执行命令 mysql -uroot -p ,密码为 root 即可进入
  退出
     exit/quit
  终止 mysql 服务(每次退出后不要忘记)
     net stop mysql

Q:如何解决使用 Navicat 连接 MySQL 出现2059错误?
A:原因:
     mysql8 之前的版本中加密规则是 mysql_native_password ,而在 mysql8 之后,加密规则是 caching_sha2_password
  解决-更改加密规则:
     alter user 'root'@'localhost' identified by 'root' password expire never;  # 更改加密方式
     alter user 'root'@'localhost' identified with mysql_native_password by 'root';  # 更新用户密码
     flush privileges;  // 刷新权限
    远程连接请将'localhost'换成'%';

Q:如何修改 root 的密码?
A:执行 alter user '[用户名]'@'localhost' identified by '[新密码]';

* 常用命令
  查看 mysql 服务状态           sc query mysql
  启动 mysql 服务               net start mysql 
  终止 mysql 服务               net stop mysql
  退出 mysql                    exit/quit                    
  列出所有数据库                 show databases;
  创建数据库                     create database 数据库名;
  删除指定数据库                 drop table [数据库名];                                                                  
  选择并进入指定数据库           use [数据库名];                                                           
  列出当前数据库的所有表         show tables;                                                                                                       
  查看 mysql 的端口号           show global variables like 'port'; 
  查看当前注册用户               select user,host,port from mysql.user;                             
  修改 root 用户密码            alter user '[用户名]'@'localhost' identified by '[新密码]';   
  查看 secure-file-priv 值      show variables like '%secure%';

Q:如何获取 mysql 的 jar 包?
A:进入 https://dev.mysql.com/downloads/connector/j/ 
  下拉菜单选择 Platform Independent 项,下载后解压即在文件夹中

Q: eclipse 的 Java 项目如何连接 mysql ?
A: Java 连接 mysql 需要驱动包,即 jar 包
  右键你的项目-> Build Path ->Configure Build Path ->Libraries -> Add External JARs -> Apply 即可
  ( 代码详见 JavaMySQL.java )

Q: eclipse 的 JavaWeb 项目如何连接 mysql ?
A: 导入 jar 包(同上) 
   代码与 Java 项目基本相同,但不需要注册 JDBC 驱动!
   把 jar 包拷贝到 Tomcat 的 lib 目录下即可

Q:导出数据时报错:
   The MySQL server is running with the --secure-file-priv option so it cannot execute this statement
  如何解决?
A:执行 show variables like '%secure%'; 发现 secure-file-priv 值为 NULL ,代表禁止导出,

* mysql NULL 值处理
  当查询条件的字段为 NULL 时,该命令可能会无法工作
  未处理此类情况, mysql 提供了三大运算符:
    IS NULL:当列的值是 NULL ,此运算符返回 true
    IS NOT NULL:当列的值不为 NULL ,运算符返回 true
    <=>:比较运算符(不同于 = 运算符),当比较的两个值相等或都为 NULL 时返回 true
  不要使用 ==NULL 或 !=NULL 在列中查找 NULL 值
  在 mysql 中, NULL 值与任何其它值的比较(即使是 NULL )永远返回 NULL ,即 NULL==NULL 返回 NULL
     select *,age+ifnull(SubmissionDate,100) from test;

 mysql 事务
  mysql 主要用于处理操作量大,复杂度高的数据
  例如当你删除一个员工信息,那么你既要删除员工的基本资料,还要删除该员工的其它相关信息,这些数据库操作语句就构成一个事务
  在 mysql 中只有使用 innodb 数据库引擎的数据库或表才支持事务
  事务处理可以用来维护数据库的完整性,保证成批的 sql 语句要么全部执行,要么全部执行
  事务的4个必要条件:
    1.原子性
      一个事务中的所有操作,要么全部完成,要么全部未完成(已执行的会回滚)
    2.一致性
      在事务开始前和事务结束后,数据库的完整性没有被破坏
    3.独立性(隔离性)
      数据库允许多个并发事务同时对数据进行读写和修改的能力,可以防止多个事务并发执行时由于交叉执行而导致数据不一致
    4.持久性
      事务处理后,对数据的修改是永久的
  mysql 命令行的默认设置下,事务都是自动提交的,即执行 sql 语句后就会马上执行 commit 操作
  显式开启事务,你可以执行 begin 或 start transaction ,若想禁止自动提交可执行 set autocommit=0

 mysql 事务控制语句
  1. begin 或 start transaction 显式地开启一个事务
  2. commit 也可以使用 commit work ,二者等价, commit 会提交事务,并使已对数据库进行地所有修改成为永久性
  3. rollback 也可使用 rollback work ,二者等价, 回滚会结束用户地事务,并撤销正在进行的所有未提交的修改
  4. savepoint identifier , savepoint 允许在事务中创建一个保存点,一个事务中可以有多个 savepoint
  5. release savepoint identifier 删除一个事务的保存点,当没有指定的保存点时,执行该语句会抛出一个异常
  6. rollback to identifier 把事务回滚到标记点
  7. set transaction 用来设置事务的隔离级别
     innodb 存储引擎提供事务的隔离级别有 read uncommitted , read committed , repeatable read 和 serializable

 mysql 事务处理的主要两种方法  
  1.用 begin , rollback , commit 来实现
    a. begin 开始一个事务
    b. rollback 事务回滚
    c. commit 事务确认
  2.直接用 set 来改变 mysql 的自动提交模式
    a. set autocommit=0禁止自动提交
    b. set autocommit=1 开启自动提交

 mysql 索引
   mysql 索引的建立对于 myslq 的高效运行是很重要的,索引可大大提高 mysql 的检索速度,但也会降低更新表的速度,占用磁盘空间的索引文件
  索引分单列索引和组合索引
    单列索引:只包含单个列,一个表可以有多个单列索引
    组合索引:一个索引包含多个列
  索引也是一张表
  普通索引:
    最基本的索引,无任何限制
    创建索引:
       create index index_name on table_name(column_name);
    添加索引:
       alter table table_name add index index_name(column_name);
    创建表时指定:
       create table table_name(
         ID int not null,
         name varchar(16) not null,
         index [indexName] (column_name(length))
       );
    删除索引:
       drop index [indexName] on table_name;
  唯一索引:
    索引列的值必须唯一,但允许有空值,若为组合索引,则列值的索引必须唯一
    创建索引:
       create unique index indexName on table_name(username(length))
    修改索引:
       alter table table_name add unique [indexName] (username(length))
    创建时指定:
       create table table_name(
         ID int not null,
         username varchar(16) not null,
         unique [indexName] (username(length))
       );
    使用 alter 命令添加和删除索引
      1.添加一个主键 
         alter table table_name add primary key(column_list);
      2.创建索引的值必须是唯一的
         alter table table_name add unique indexName(column_list);
      3.添加普通索引,索引值会出现多次
         alter table table_name add indexName(column_list);
      4.指定索引为 fulltext ,用于全文索引 
         alter table table_name add fulltext indexName(column_list);
      添加索引:
         alter table table_name add index(c);
      删除索引:
         alter table table_name drop index c;
    使用 alter 命令添加和删除主键
      添加主键索引:
         alter table test modify id int not null;
         alter table test add primary key (id);
      删除主键索引:
         alter table test drop primary key;
    显示索引信息:
       show index from test;


 mysql 临时表
  临时表只在连接时可见,关闭连接时自动删除表并释放所有空间
  创建临时表:
     create temporary table t(...);
  删除临时表:
     drop table t;
  other:
     create temporary t as( select *from test );

复制表
  完全复制数据表,包括表的结构,索引,默认值等,仅仅使用 create table ... select 命令是无法实现的
  复制步骤:
    1.使用 show create tableName; 命令获取创建数据表语句,该语句包含了原数据表的结构,索引等
    2.复制显示的 sql 语句,修改数据表名,并执行 sql 语句,通过以上命令将完全的复制数据表结构
    3.使用 insert into ... select 语句复制表的内容
       insert into clone( test_id, test_title ) select test_id,test_title from test;
  另一种复制方法:
    1. create table clone like test;
    2. insert into clone select * from test;

只复制表结构到新表
  create table new_table_name select * from old_table_name;
  create table new_table_name like old_table_name;
复制表结构及数据到新表
  create table new_table_name select * from old_table_name; 

获取服务器元数据
   select version()       服务器版本信息
   select database()      当前数据库名(或者返回空)
   select user()          当前用户名
   select status          服务器状态
   show variables         服务器配置变量

统计重复数据
  功能类似于 where 但 where 关键字无法与聚合函数一起使用
   select count(*) as repetitions,Course from test1 group by Course having repetitions>1;

过滤重复数据
   select distinct Course from test1;

删除重复数据
  方法一:
   create table tmp select col1,col2,col3 from test group by (col1,col2,col3);
   drop table test;
   alter table tmp rename to test;
  方法二:
     alter ignore table test add primary key (col1,col2);

mysql 注入
  如果你通过网页获取用户输入的数据并将其插入一个 mysql 数据库
  那么就有可能发生 sql 注入问题:通过 sql 命令插入到 web 表单提交或输入域名或页面请求的查询字符串,最终到达欺骗服务器执行恶意的 sql 命令
  我们必须确认用户输入的数据是安全的,必须对用户的数据进行过滤处理
  通过脚本过滤 sql 注入的字符
  防止 sql 注入需要注意以下几点:
    1.不信任用户的输入
    2.不适用动态拼接的 sql
    3.不使用管理员权限的数据库连接
    4.不把机密信息直接存放(加密)
    5.异常时少给提示,建议自定义异常
    6. sql 注入的检测方法一般采取辅助软件或网站平台来检测
      软件一般采用 sql 注入检测工具 jsky
      网站平台就有亿思网站安全平台检测工具
       MDCSOFT SCAN 等,采用 MDCSOFT-IPS 可有效防御 sql 注入, XSS 攻击等

导出数据
  普通导出:
     select * from test into outfile 'D:\\exe\\mysql-8.0.20-winx64\\output\\test.txt';
  导出 CSV 格式:
     select * from test into outfile '/tmp/test.txt' fields terminated by ',' enclosed by '"' lines terminated by '\r\n';
  自定义导出(各值用 , 隔开):
     select * into outfile '/tmp/test.txt' fields terminated by ',' optionally enclosed by '"' lines terminated by '\n' from test;

导出数据库
  导出 sql 格式的数据:
    不用登录 mysql
    直接执行 mysqldump -h localhost -u root -p ding > D:\exe\mysql-8.0.20-winx64\output\sql.txt
    会需要输入密码

导入数据
   mysql 命令导入:
     mysql -u root -p root < [要导入的数据库数据的地址];
   source 导入:
    登录 mysql
     create database [数据库名];  # 创建数据库
     use [数据库名];
     set names utf8;  # 设置编码
     source [数据库数据地址];  # 导入备份数据库
  使用 load data 导入 txt 文件数据
     load data local infile "[要导入的数据库数据的地址]" into table [导入数据的目标表名];

 mysql 函数
  (略)

 myslq 运算符
  (略)

查看表的索引
  show index from table_name;
   Non_unique        如果索引不能包括重复词,则为 0 ,如果可以,则为 1
   Key_name          索引的名称
   Seq_in_index      索引中的列序列号,从 1 开始
   Column_name       列名称
   Collation         列以什么方式存储在索引中,在 MySQL 中,有值 A (升序)或 NULL (无分类)
   Cardinality       索引中唯一值的数目的估计值.通过运行 ANALYZE TABLE 或 myisamchk -a 可以更新
                     基数根据被存储为整数的统计数据来计数,所以即使对于小型表,该值也没有必要是精确的
                     基数越大,当进行联合时, MySQL 使用该索引的机会就越大
   Sub_part          如果列只是被部分地编入索引,则为被编入索引的字符的数目,如果整列被编入索引,则为 NULL
   Packed            指示关键字如何被压缩,如果没有被压缩,则为 NULL
   Null              如果列含有 NULL ,则含有 YES ,如果没有,则该列含有 NO
   Index_type        用过的索引方法( BTREE FULLTEXT HASH RTREE)

删除表的索引
  先查看表的索引,获得待删除的索引的 Key_name
  再执行 alter table table_name drop index Key_name;

添加索引
  ALTER TABLE table_name ADD UNIQUE KEY([列名1],[列名2],...);
  !在表已存在数据的情况下会失败报错,可先清空表

ON DUPLICATE KEY UPDATE
  insert into table_name(name1,name2,name3,...)
  values(value1,value2,value3,...)
  ON DUPLICATE KEY UPDATE
  name_1=value_1,
  name_2=value_2,
  ...;
  此语法为 mysql 独有且表存在索引
  向表插入一组数据,若插入的索引字段(集)的数据(集)在表中不存在或不包含索引(集)则直接插入
  若存在则更新指定列(集)

查看表结构  
  show create table table_name;
  包含 foreign_key_name

删除外键
  alter table table_name drop foreign key foreign_key_name;
  这个 foreign_key_name 可不是你创建表时声明的另一张表的某一列的列名哦

添加外键
  alter table 表名 add constraint FK_ID foreign key(你的外键字段名) REFERENCES 外表表名(对应的表的主键字段名);

 create 创建表
create table test(
  IDCard int unsigned auto_increment,
  Name varchar(20) not null,
  age int,
  SubmissionDate date,
  primary key (IDCard)
)engine=INNODB default charset=utf8;

create table test1(
  IDCard int unsigned auto_increment,
  Course varchar(20),
  grade int,
  primary key (IDCard)
)engine=INNODB default charset=utf8;


delete 删除数据
  DML 语句,可回滚
  删除所有行,可作用于表和视图
    delete from test where IDCard=4;

drop 删除表
  DDL 语句,执行后无法回滚
  可作用于表和视图
  删除所有行,包括约束,索引,表结构
    drop table [表名]; 

truncate 关键字
  DDL 语句,仅删除所有行,表结构,约束,索引依旧存在,会重置表的自增值
  只能作用于表,不会激活与表有关的删除触发器,执行速度快且无法回滚
    truncate table [表名]; 

insert 插入
 insert into tableName([列名1],[列名2],...) valuse([值1],[值2],...);

insert ignore into 插入
#如果插入数据库已存在的数据就会跳过这条语句,若没有就插入
insert ignore into test1(IDCard,Course,grade) values (9,"C",84);

binary 关键字
select * from test where binary name='tom';  # 区分大小写

update 更新
update test set age=100 where IDCard=2;
update test set age=age+1;  # 所有人 age 属性值+1

replace 替换
  将[列名]字段为数据为[参数1]的全部替换为[参数2]
  update [表名] set [列名]=replace([列名],[参数1],[参数2]);

union 操作符
# select name1,name2,name3,...
  from table_name1 [where conditions]
  union [all|distinct]
  select name1',name2',name3',...
  from table_name2
# 将两个以上的 select 语句结果组合到一个结果结合中,即合并结果集
# name 要检索的列
  table_name 要检索的数据表
  conditions 条件
  all 参数显示全部数据,即重复的数据也会显示
  distinct 为可选参数,删除结果中重复的数据,若不加参数默认情况下同为此效果

group by
  语句根据一个或多个列对结果集进行分组
  分组的列上我们可以使用 COUNT SUM AVG 等函数
    select age,count(*) from test group by age;  # 各个年龄的人数

with rollup
  在group分组字段的基础上再进行统计数据
    select age,sum(age) from student group by id with rollup;
    select coalesce(name,"总数"),sum(age) as count from test group by name with rollup;  # 年龄和

inner join 内连接
select t1.IDCard,t2.Course,t2.grade from test t1 inner join test1 t2 on t1.IDCard=t2.IDCard;  # 交集

left join 左连接
select t1.IDCard,t2.Course,t2.grade from test t1 left join test1 t2 on t1.IDCard=t2.IDCard;  # t1

right join 右连接
select t1.IDCard,t2.Course,t2.grade from test t1 right join test1 t2 on t1.IDCard=t2.IDCard;  # t2(删掉 t1 中一条数据)

order by
  数据排序(ASC 升序,DESC 降序)
    select name1,name2,... from table_name order by name [ASC|DESC];
  多个字段排序
  select * from [table_name] order by [column_name_1 desc],[column_name_2] [ASC|DESC];

where
  select * from test where age>=16;

like
  select * from test where Name like '%m';  # 以 m 结尾
  select * from test where Name like 'J%';  # 以 J 开头
  select * from test where Name like '_i_';  # 三位且中间为 i 
  (更多见正则表达式)

NULL 处理
  select *,age+ifnull(SubmissionDate,100) from test;  // 若值为 NULL 则用指定值代替

正则表达式
 mysql 既可以通过 like...% 来进行模糊匹配,同样也支持正则表达式匹配
 mysql 使用 regexp 操作符来进行正则表达式匹配
 regexp 操作符
^          匹配输入字符串的开始位置
$          匹配输入字符串的结束位置
.          匹配除 \n 之外的任何单一字符 
[]         字符集合,匹配包含的任意一个字符
[^]        负值字符集合,匹配未包含的任意一个字符
|          或
*          匹配前面的子表达式零次或多次
+          匹配前面的子表达式一次或多次 
{n}         n 为非负整数,匹配 n 次
{n,m}       m 和 n 均为非负整数,其中 n<=m ,最少匹配 n 次且最多匹配 m 次
eg:
select Name from test where Name regexp '^J';
select Name from test where Name regexp 'k$';
select Name from test where Name regexp 'ar';

alter 命令
# 当需要修改数据表名或修改数据表字段时
alter table [table_name] drop column SubmissionDate;  # 删除 SubmissionDate 列
alter talbe [table_name] add heigh int;  # 增加一个名为 heigh 列且类型为 int / 增加字段
alter talbe [table_name] modify heigh weight bigint;  # 将 heigh 列更名为 weight ,类型更改为 bigint , modify 也可使用 change
alter talbe [table_name] modify heigh heigh bigint;  # 将 heigh 列的类型更改为 bigint
alter talbe [table_name] change heigh int not null default 100;  # 将 heigh 列的属性更改为 not null 且默认值为100
alter talbe [table_name] alter heigh set default 100;  # 将 heigh 列的默认值改为100
alter talbe [table_name] alter heigh drop default;  # 将 heigh 列的默认值删除
alter talbe [table_name] engine=myisam;  # 将 test 表的类型更改为 myisam
alter talbe [table_name] rename to [new_table_name];  # 修改表名
alter table [table_name] drop foreign key CourseId;  # 删除外键
ALTER TABLE [table_name]
  MODIFY COLUMN [column_name] timestamp NULL 
  DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '[备注信息]';  # 为指定字段设置默认时间
alter table [table_name] auto_increment=34; # 修改自增起始值

 auto_increment 自增序列
create table test(
  id int unsigned not null auto_increment;
);  # 创建表时设置为自增列,默认从1开始
create table test(
  id int unsigned not null auto_increment;
)engine=innodb auto_increment=100 charset=utf8;  # 从100开始
alter table test id auto_increment=100;  # 从100开始
#重置序列
   alter table test drop id;
   alter table test add id int unsigned not null auto_increment first,add primary key (id);

cash when
  SELECT 
  CASE WHEN STATUS='1' THEN '状态1'
  WHEN STATUS='2' THEN '状态2'
  WHEN STATUS='3' THEN '状态3'
  WHEN STATUS='0' THEN '状态4'
  ELSE '状态5' END AS '状态' 
  FROM table;

find_in_set(str1,str2)
  用于返回str2中str1所在的位置索引
  如果找到了则返回true(1),否则返回false(0),其中str2必须以半角符号的逗号 , 分割开
  select find_in_set("44",'11,2,44');

locate(substr,str)
  用于返回 str 中 substr 所在的位置索引
  如果找到了则返回一个大于 0 的数,否则返回 0
  select * from user where locate('yanggb', hobby ) > 0;

* 建议因管理员方式运行命令提示符

* 下载 mysql 至本地
   Windows 操作系统中有两种安装 mysql 的方式:
    1.下载 MSI 点击安装
    2.下载 ZIP 解压即可使用
      此方法安装后默认是没有 my.ini 配置文件的,虽然可以通过命令行修改但重启之后就会失效
      解决方法:
        a.在 mysql 根目录下新建 my.ini 将以下代码复制进去并保存
            [mysql]
            default-character-set = utf8mb4
            [mysqld]
            port = 3306
            basedir = D:\exe\mysql-8.0.20-winx64
            max_connections=200
            character-set-server = utf8mb4
            default-storage-engine=INNODB
          其中 basedir 根据实际 mysql 安装位置进行更改
        c.重新生成 data 文件
          执行 mysqld --initialize --console 命令(非首次使用在执行前需确保 data 文件是空的)
          在输出的信息中包含 root 用户的初始密码
        d.启动服务
          服务窗口启动:计算机管理->服务-> mysql ->启动
           cmd 启动:进入 mysql 的 bin 目录下执行 net start mysql

Q:如何启动并进入 mysql ?
A:启动 mysql 服务
    服务窗口启动:计算机管理->服务-> mysql ->启动
     cmd 启动: net start mysql
  登录
     ctrl+r -> cmd -> cd /d [ mysql 的 bin 目录路径](若配置了环境变量则可省去此步)
    执行命令 mysql -uroot -p ,密码为 root 即可进入
  退出
     exit/quit
  终止 mysql 服务(每次退出后不要忘记)
     net stop mysql

Q:如何解决使用 Navicat 连接 MySQL 出现2059错误?
A:原因:
     mysql8 之前的版本中加密规则是 mysql_native_password ,而在 mysql8 之后,加密规则是 caching_sha2_password
  解决-更改加密规则:
     alter user 'root'@'localhost' identtified by 'root' password expire never;  # 更改加密方式
     alter user 'root'@'localhost' identified with mysql_native_password by 'root';  # 更新用户密码
     flush privileges;  // 刷新权限
    远程连接请将'localhost'换成'%';

Q:如何修改 root 的密码?
A:执行 alter user '[用户名]'@'localhost' identified by '[新密码]';

* 常用命令
  查看 mysql 服务状态           sc query mysql
  启动 mysql 服务               net start mysql 
  终止 mysql 服务               net stop mysql
  退出 mysql                    exit/quit                    
  列出所有数据库                 show databases;    
  删除指定数据库                 drop table [数据库名];                                                                  
  选择并进入指定数据库           use [数据库名];                                                           
  列出当前数据库的所有表         show tables;                                                                                                       
  查看 mysql 的端口号           show global variables like 'port'; 
  查看当前注册用户               select user,host,port from mysql.user;                             
  修改 root 用户密码            alter user '[用户名]'@'localhost' identified by '[新密码]';   
  查看 secure-file-priv 值      show variables like '%secure%';

Q:如何获取 mysql 的 jar 包?
A:进入 https://dev.mysql.com/downloads/connector/j/ 
  下拉菜单选择 Platform Independent 项,下载后解压即在文件夹中

Q: eclipse 的 Java 项目如何连接 mysql ?
A: Java 连接 mysql 需要驱动包,即 jar 包
  右键你的项目-> Build Path ->Configure Build Path ->Libraries -> Add External JARs -> Apply 即可

Q:导出数据时报错:
   The MySQL server is running with the --secure-file-priv option so it cannot execute this statement
  如何解决?
A:执行 show variables like '%secure%'; 发现 secure-file-priv 值为 NULL ,代表禁止导出,

* mysql NULL 值处理
  当查询条件的字段为 NULL 时,该命令可能会无法工作
  未处理此类情况, mysql 提供了三大运算符:
    IS NULL:当列的值是 NULL ,此运算符返回 true
    IS NOT NULL:当列的值不为 NULL ,运算符返回 true
    <=>:比较运算符(不同于 = 运算符),当比较的两个值相等或都为 NULL 时返回 true
  不要使用 ==NULL 或 !=NULL 在列中查找 NULL 值
  在 mysql 中, NULL 值与任何其它值的比较(即使是 NULL )永远返回 NULL ,即 NULL==NULL 返回 NULL
     select *,age+ifnull(SubmissionDate,100) from test;

 mysql 事务
  mysql 主要用于处理操作量大,复杂度高的数据
  例如当你删除一个员工信息,那么你既要删除员工的基本资料,还要删除该员工的其它相关信息,这些数据库操作语句就构成一个事务
  在 mysql 中只有使用 innodb 数据库引擎的数据库或表才支持事务
  事务处理可以用来维护数据库的完整性,保证成批的 sql 语句要么全部执行,要么全部执行
  事务的4个必要条件:
    1.原子性
      一个事务中的所有操作,要么全部完成,要么全部未完成(已执行的会回滚)
    2.一致性
      在事务开始前和事务结束后,数据库的完整性没有被破坏
    3.独立性(隔离性)
      数据库允许多个并发事务同时对数据进行读写和修改的能力,可以防止多个事务并发执行时由于交叉执行而导致数据不一致
    4.持久性
      事务处理后,对数据的修改是永久的
  mysql 命令行的默认设置下,事务都是自动提交的,即执行 sql 语句后就会马上执行 commit 操作
  显式开启事务,你可以执行 begin 或 start transaction ,若想禁止自动提交可执行 set autocommit=0

 mysql 事务控制语句
  1. begin 或 start transaction 显式地开启一个事务
  2. commit 也可以使用 commit work ,二者等价, commit 会提交事务,并使已对数据库进行地所有修改成为永久性
  3. rollback 也可使用 rollback work ,二者等价, 回滚会结束用户地事务,并撤销正在进行的所有未提交的修改
  4. savepoint identifier , savepoint 允许在事务中创建一个保存点,一个事务中可以有多个 savepoint
  5. release savepoint identifier 删除一个事务的保存点,当没有指定的保存点时,执行该语句会抛出一个异常
  6. rollback to identifier 把事务回滚到标记点
  7. set transaction 用来设置事务的隔离级别
     innodb 存储引擎提供事务的隔离级别有 read uncommitted , read committed , repeatable read 和 serializable

 mysql 事务处理的主要两种方法
  1.用 begin , rollback , commit 来实现
    a. begin 开始一个事务
    b. rollback 事务回滚
    c. commit 事务确认
  2.直接用 set 来改变 mysql 的自动提交模式
    a. set autocommit=0禁止自动提交
    b. set autocommit=1 开启自动提交

时间
  DATETIME       YYYY-MM-DD HH:MM:SS
  DATE           YYYY-MM-DD
  TIMESTAMP      YYYYMMDDHHSSMM
  TIME           HH:MM:SS
  YEAR           YYYY
  DATETIME 值的范围从 1000-01-01 00:00:00 到 9999-12-31 23:59:59,它使用 5 个字节进行存储
  样例:
    INSERT INTO vatsa(Dt) VALUES('2020-09-14 23:18:17'); 

uuid()
  可用来生成时间和空间上都独一无二的值
  固定字符为36个字符

数据库重命名
  建议拷贝或删掉重新建

时间类型选择
  数据库用 DATETIME
  java 用 LocalDateTime

查看所有存储过程
  show procedure status;

DROP procedure pro1; -- 删除游标
CREATE PROCEDURE pro1() -- 创建游标
BEGIN
	DECLARE done int DEFAULT false; -- 判断循环是否结束
	DECLARE res int DEFAULT 0; -- 结果
	DECLARE v_id int DEFAULT 0;
	DECLARE flag int DEFAULT 0; -- 计数
	DECLARE v_category_id int DEFAULT 0;
	DECLARE d_name VARCHAR(100) DEFAULT '';
	
	DECLARE v_dexun_product_id VARCHAR(80) DEFAULT '';
	DECLARE v_name VARCHAR(255) DEFAULT '';
	DECLARE v_img_url VARCHAR(255) DEFAULT '';
	DECLARE v_category_name VARCHAR(20) DEFAULT '';
	DECLARE v_price decimal(11,2) DEFAULT 0;
	DECLARE v_cost_price decimal(11,2) DEFAULT 0;
	DECLARE v_price1 decimal(11,2) DEFAULT 0;
	DECLARE v_specifications VARCHAR(200) DEFAULT '';
	DECLARE v_remarks VARCHAR(500) DEFAULT '';
	DECLARE v_non_shipping_region VARCHAR(4000) DEFAULT '';
	
	DECLARE rss CURSOR FOR SELECT dexun_product_id,name,img_url,category_name,price,cost_price,price1,specifications,remarks,non_shipping_region from temp_dexun_product;
-- 	DECLARE rss CURSOR FOR SELECT id from temp_dexun_product;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=true; -- 指定游标循环结束时的返回值
	OPEN rss; -- 打开游标
	read_loop:Loop
  FETCH rss into v_dexun_product_id,v_name,v_img_url,v_category_name,v_price,v_cost_price,v_price1,v_specifications,v_remarks,v_non_shipping_region;
--     FETCH rss into v_id;
	IF done then -- 判断是否结束
	  LEAVE read_loop;
	end if;
	set flag = flag+1;
	SELECT tcb.category_id into v_category_id from t_category_base tcb where tcb.`name`=v_category_name; -- 获取 类型id
	INSERT INTO t_product_copy(name,img_url,category_id,price,cost_price,price1,specifications,remark,shop_id) 
	  VALUES(v_name,v_img_url,v_category_id,v_price,v_cost_price,v_price1,v_specifications,v_remarks,12);
  END LOOP;
	SELECT flag;
	CLOSE rss;
END;

call pro1();

关于大小写
  查看是否区分大小写.根据 value 值判断,0代表区分,1代表不区分
    show VARIABLES like '%table_names';
  mysql 对 varchar 类型数据默认不区分大小写,但如果以 _bin 编码的话会使 mysql 对其区分大小写
    utf8_general_ci 不区分大小写
    utf8_bin 区分大小写
  Linux 下的 mysql 默认是要区分表名大小写,但在 windows 下不区分
    让 mysql 不区分表名大小写的方法
      用 root 登录,修改 etc/my.cnf ,在 [mysqld] 下加入一行
        lower_case_table_names=1
      重启数据库即可

字符集
  为兼容各国的文字而做的编码,比如GB2312,GBK等
  MySQL 里 utf8 实际是用3个字节存储,即对应 utf8mb3
  而真正意义上的 utf8 对应的是4个字节,即 utf8mb4
  在 Navicat 等工具创建数据库时 字符集 项建议选择 utf8mb4
  utf8mb4 比 utf8mb3 支持范围和类型更多

排序规则
  后缀含义
    ci      case insensitive 不区分大小写
    _ai_ci  accent insensitive 不区分音调(例如"鹅"和"饿"的拼音视为"等价"相同), case insensitive 不区分大小写
    cs      case sensitive collation 区分大小写
    bin     binary case sensitive 区分大小写
  MySQL8 默认的字符检索策略是 utf8mb4_0900_ai_ci ,其中 0900 为版本代号,即9.0版本,发布于2016年6月
  utf8mb4_bin
    将数据二进制编译存储,区分大小写,
  utf8mb4_general_ci
    没有实现 Unicode 排序规则
  utf8mb4_unicode_ci
    基于标准的 Unicode 排序和比较,能够在各语言间精确排序,实现了稍微复杂的排序算法
  如何选择
    utf8mb4 常用的的字符排序规则
      utf8mb4_general_ci
        更快,在比较和排序的时候更快
      utf8mb4_unicode_ci
        更准确,在比较和排序的时能够处理特殊字符,实现了稍微复杂的排序算法
    推荐 utf8mb4_unicode_ci
  *上述总结来自某篇博客,除了技术相关的问题解答,还以此延伸谈论了排序
   列举了一个按订单排序规则的问题,他说部分人通常会为订单添加一个数字类型的状态字段,依据此字段大小进行排序
   但当调整或插入新的状态时就会出现小麻烦,这也是我没有考虑到的,在一些特殊情况下可以考虑自定义动态排序规则

Q:关于外键的使用
A:很多文章说不推荐使用外键
  甚至引用阿里的JAVA规范
    【强制】不得使用外键与级联,一切外键概念必须在应用层解决
  也有人说
    只有一个场景不能使用外键,就是分库分表
  还强调了
    数据库的性能瓶颈在磁盘
  ...
  我目前的观点是:用,除非公司之类的要求
  之所以表态,是因为我有自己的小项目,必须得站一边
  目的只有一个,使表之间建立关系,使表结构一目了然,方便分析

聚簇索引
  其特点是叶子节点包含了完整的记录行,而非聚簇索引的叶子节点只有索引字段和主键ID
  MySQL 索引采用 B+Tree
  InnoDB 和 MyISAM 作为 MySQL 中 B+Tree 索引的两种重要体现形式
  InnoDB 推荐以主键作为索引来组织数据进行存储,它认为主键是一个非常重要的属性
  InnoDB 表数据文件本身就是按 B+Tree 组织的一个索引结构,聚簇索引就是按照每张表的主键来构造一个 B+ 树,叶子节点中存放的就是整张表的数据
  所以解释了以 InnoDB 作为存储引擎时主键的必要性
  MySQL 中除主键索引外都是非聚簇索引(辅助索引),主键索引也可称为聚簇索引
  非聚簇索引就是为了寻找主键索引的二级索引,从通过主键索引而找到数据

Q:查看 MySQL 支持的存储引擎?
A:执行
    show engines;

Q:MySQL 数据存储位置?
A:执行
    show variables like 'datadir';
  进入对应目录可看到以数据库中的数据库命名的文件夹
  进入文件夹,可以看到相关的数据文件,依据索引引擎的不同会有些差异
  

存储引擎
  MySQL 中每一个表都可以指定选择存储引擎,可以根据不同的需求选择不同的存储引擎
  可使用 show engines 命令查看 MySQL 支持的存储引擎
  常用的存储引擎有
    InnoDB
      MySQL 的默认存储引擎
      特点
        1.支持事务操作
          每条 SQL 都默认封装成事务,自动提交,会影响速度
          所以最好把多条 SQL 语句放在 begin-commit 中组成一个事务
        2.支持外键
        3.聚合索引/聚簇索引
          使用 B+tree 作为索引结构,数据文件和主键索引绑定在一起
        4.不保存表的总条数
        5.支持全文索引(5.7之后)
        6.支持表级锁,行级锁(默认)
          行锁是实现在索引上,而不是物理行上
          如果未命中索引,无法使用行锁,将会退化为表锁
        7.必有主键
          如果创建的表没有主键,那么系统会自动隐藏生成一个 6 byte 的 int 型的索引作为主键索引
        8.存储方式为 xxx.ibd 存储数据内容
    MyISAM
      B+Tree 索引的另一种重要表现形式
      特点
        1.非聚簇索引
          使用 B+tree 作为索引结构,数据文件和主键索引分离,索引文件保存的是数据文件指针
        2.有一个变量专门来保存整个表的行数,查询 count 很快,但不能加任何 where 条件
        3.支持全文索引
        4.可以被压缩后进行查询操作,节省空间容量
        5.支持表级锁,不支持行级锁
        6.主键不必须
        7.存储方式为 xxx.MYI 存储索引文件, xxx.MYD 存储数据内容
        8.不包含外键
          当包含外键的 InnoDB 表转换为 MyISAM 会失败
          通常通过  join-on 关联方式代替外键作用
    CSV
      数据以 CSV文件 存储
      特点
        1.不能定义索引,列必须定义 not null ,不能设置自增列
          不适用于大表或者数据查询,排序等处理操作
        2. CSV 数据要用 , 隔开,可直接编辑 CSV文件 进行数据的编排
          数据安全性低
        3.可以对硬盘中保存的表文件数据进行直接编辑 xxx.CSV 文件,需要通过 flush table [table_name] 命令使其生效
      应用场景
        1.数据的快速导入导出
        2.表格直接转换成 CSV
    Archive
      数据以 压缩协议 存储
      特点
        1.只支持 insert 和 select 两种操作
        2.只允许自增ID列建立索引
        3.支持行级锁
        4.不支持事务
        5.数据占用磁盘少
          博客文章中简单测试结果指出可节省95%的容量
      应用场景
        1.日志系统
        2.大量的设备数据采集
    Memory
      早期称为 Heap 存储引擎,与优化器查询有关,对临时表很有用
      基于 Hash 索引,底层是 Hash 表,对于精确查询非常高效
      即在 = in 条件下高效,无法通过索引做区间查询,只能全盘扫描
      特点
        1.数据存储在内存中, IO 效率高
        2.服务重启丢失,内存数据表默认只有16M
          无持久性
        3.支持 Hash 索引(默认), BTree 索引
        4.不支持大数据存储类型,例如 blog text
        5.表级锁
      应用场景
        1.等值查找热度较高数据
        2.查询结果在内存中进行计算,大多数是采用此存储引擎作为临时表存储需要计算的数据
      替代
        Redis,Memcache
      总结
        更多使用在 MySQL 优化器查询阶段
  MySQL 默认引擎是 InnoDB
  可使用 show variables like 'datadir' 查看数据的存储位置

行记录格式
  InnoDB 存储引擎与 Oracle SQLServer 一样,记录是以行的形式存储
  主要的行记录格式如下
    1.Redundant
      是为兼容之前版本而保留的
    2.Compact
      5.1版本的默认格式
    3.Compressed,Dynamic
      数据页中只存20个字节的指针

表如果存在则删除表
  drop table if exists [table_name];

TPS
  Transaction Per Second ,每秒事务处理量

QPS
  Queries per second ,每秒查询率

主从数据库(master-slave)
  把数据库架构分为主数据库和从数据库
  从数据库是主数据库的备份,以提高数据的安全性
  当主数据库崩溃时,从数据库可切换为主数据库,保证服务高可用
  不至于数据库崩溃而导致整个项目无法运行,可有效防止财产损失
  一般情况下,主数据库做更改操作,从数据库做查询操作,即读写分离
  原理
    MySQL 的主从复制依赖于 binlog ,即记录 MySQL 上所有变化并以二进制形式保存再磁盘上的日志文件
    主数据库内部有一个线程,专门服务于与从数据库之间维持着的一个长连接
    主数据库执行的 SQL(,update,insert,delete) 被写到 binlog 并将其以异步方式传输到从数据库
    从数据库将其写入 relaylog 日志文件并读取回放执行,最终实现主从一致性

Q:如何保证主从一致
A:当主数据库与从数据库的索引不同时,两者查询的数据一般是不一样的
  binlog 的3种格式:
    1.statement 格式
    2.row 格式
    3.mixed 格式
  默认 statement 格式,记录 SQL 原文
  row 格式包含两个 event
    1.Table_map
      操作的表
    2.Delete_rows
      删除的行为,记录删除的具体行数
  即记录要删除的主键 id 信息,就不会出现主从不一致的问题
  但当删除的数据量很大时, row 格式就会很占空间,消耗IO
  mixed 格式即为 statement 和 row 的混合使用,当 MySQL 判断数据不一致时,就用 row 格式,否则使用 statement 格式


Q:主从延迟
A:当主数据库删除了某条数据,之后去查询时发现依旧能(在从数据库种)查询到
  本质是 主数据库写 binlog 与 从数据库回放 完成时间产生差值
  从数据库的 slave_SQL_Running 是单线程的(低版本的Mysql),当一个 DDL 卡住了那么之后的 DDL 将处于等待中,导致了延时
  解决方法:
    1.提高机器新能
    2.从库过多,3至5个适宜
    3.事务过大,分批进行
    4.优化网络
    5.MySQL 版本过低,高版本支持多线程复制
  缩短主从延迟时间,尽量不查询从数据库

主从切换
  1.一主一从
    主数据库发生故障前:主数据库负责读写,从数据库负责读
    主数据库发生故障后:主数据库负责读,从数据库负责读写
    分担主数据库压力,提高并发度,操作简单,还可充当数据备份角色
    一般小公司会这么用,但主从分离意义不大,本身流量不高
  2.一主多从
    分担主数据库的压力,提升了读的并发度
    但只有一台主数据库写,所以写的并发度不高
    基本上大公司使用该模式,因为查询流量高

主主数据库
  两个数据库互为主从关系,都可以对数据库进行读写操作
  但当有自增主键很可能会产生主键冲突,所以需要改进

Q:每次执行 update 自动更新相关时间类型字段
A:ALTER TABLE [tab_name]  MODIFY COLUMN [update_time] TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;

---样例---
insert into test(Name,age) values ("Tom",12);
insert into test(Name,age) values ("Marry",22);
insert into test(Name,age) values ("Jim",15);
insert into test(Name,age) values ("Kara",32);
insert into test(Name,age) values ("Apple",14);
insert into test(Name,age) values ("Jeck",16);
insert into test(Name,age) values ("Sock",21);
insert into test(Name,age) values ("Jarry",22);
insert into test(Name,age) values ("Jom",18);
insert into test(Name,age) values ("Mara",22);
insert into test(Name,age) values ("Opple",14);
insert into test(Name,age) values ("Jack",17);
insert into test(Name,age) values ("Seck",25);

insert into test1(IDCard,Course,grade) values (1,"PHP",98);
insert into test1(IDCard,Course,grade) values (1,"Java",76);
insert into test1(IDCard,Course,grade) values (1,"HTML",94);
insert into test1(IDCard,Course,grade) values (2,"PHP",73);
insert into test1(IDCard,Course,grade) values (2,"Java",98);
insert into test1(IDCard,Course,grade) values (2,"HTML",86);
insert into test1(IDCard,Course,grade) values (3,"PHP",72);
insert into test1(IDCard,Course,grade) values (3,"C",75);
insert into test1(IDCard,Course,grade) values (3,"HTML",74);
insert into test1(IDCard,Course,grade) values (4,"PHP",71);
insert into test1(IDCard,Course,grade) values (4,"Java",96);
insert into test1(IDCard,Course,grade) values (4,"HTML",94);
insert into test1(IDCard,Course,grade) values (5,"PHP",76);
insert into test1(IDCard,Course,grade) values (5,"Java",70);
insert into test1(IDCard,Course,grade) values (6,"PHP",85);
insert into test1(IDCard,Course,grade) values (6,"HTML",83);
insert into test1(IDCard,Course,grade) values (7,"PHP",88);
insert into test1(IDCard,Course,grade) values (7,"Java",93);
insert into test1(IDCard,Course,grade) values (8,"PHP",79);
insert into test1(IDCard,Course,grade) values (8,"C",78);
insert into test1(IDCard,Course,grade) values (8,"Java",93);
insert into test1(IDCard,Course,grade) values (8,"HTML",85);
insert into test1(IDCard,Course,grade) values (9,"PHP",73);
insert into test1(IDCard,Course,grade) values (9,"C",84);